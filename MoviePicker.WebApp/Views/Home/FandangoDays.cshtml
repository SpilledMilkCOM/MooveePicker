@model MoviePicker.WebApp.ViewModels.FandangoDaysViewModel

@using MoviePicker.WebApp.Models;
@using MoviePicker.WebApp.Utilities;

@{
	ViewBag.Title = "Fandango Weekend";

	var movieList = Model.Movies?.ToList();
	var weekendEnding = movieList?.FirstOrDefault()?.WeekendEnding.ToString(Constants.FORMAT_DAY_DATE);
}

<script type="text/javascript">

	google.charts.load("current", { packages: ["corechart"] });
	google.charts.setOnLoadCallback(drawChart);

	function drawChart() {
		var data = google.visualization.arrayToDataTable([['Movie', 'Ticket Sales'], @Html.Raw(Model.PieGraphData)]);

		var options = {
			title: 'Total Weekend Fandango Ticket Sales',
			is3D: true,
			sliceVisibilityThreshold: 0.04
		};

		var chart = new google.visualization.PieChart(document.getElementById('piechart_3d'));
		chart.draw(data, options);
	}
</script>

<script type="text/javascript">
	function clickFilter() {
		var pastHours = $("#pastHoursId").val();
		var url = "/Home/Fandango";

		console.log("clickFilter");

		if (pastHours != null) {
			url = url + "?";
		}

		console.log(url);

		if (pastHours != null) {
			url = url + "past=" + pastHours;
		}

		console.log(url);

		var baseUrl = parseBaseUrl();

		window.location.href = baseUrl + url;
	}

	function parseBaseUrl() {
		var baseUrl = window.location.href;

		if (baseUrl != null) {
			var slashIdx = baseUrl.indexOf("/", "https://".length);

			if (slashIdx > 0) {
				baseUrl = baseUrl.substring(0, slashIdx);
			}
		}

		return baseUrl;
	}
</script>

@{
	int movieCount = 1;     // This scope is pretty far, sorry  :(
	var totalBoxOffice = movieList.Sum(movie => movie.EarningsBase);
	var pageTitle = string.Format("{0}{1}", ViewBag.Title, Model.IsScaled ? " (Estimates Scaled)" : string.Empty);

	<div class="row">

		@* ================================================================================================================================== PICKS COLUMN ==== *@

		<div class="col-md-6 col-md-offset-1">
			<h2>
				@pageTitle
				<div class="btn btn-info btn-xs" style="font-size: large;" data-toggle="tooltip" data-placement="bottom"
					 title="This page represents the aggregation of Fandango data for each day Friday, Saturday, and Sunday from the file hosted by A.K. Valley. The dollars in the second batch of posters are computed by multiplying total estimated box office by the percentage of the sales.">
					<span class="glyphicon glyphicon-info-sign" aria-hidden="true"></span>
				</div>

				@Html.ActionLink("Hourly", "Fandango", ViewUtility.RequestParamsToDynamic(Request), new { @class = "btn btn-info btn-sm" })
			</h2>

			<h5>
				Weekend Ending: @weekendEnding (@Model.Duration.ToString("N0") ms)
			</h5>

			<div id="picksColumn">
				@if (Model.MovieListPerfectPick != null)
				{
					@Html.Partial("MovieListMini2", Model.MovieListPerfectPick)
				}

				@if (Model.MovieList != null)
				{
					@Html.Partial("MovieListMini2", Model.MovieList)
				}

				@if (Model.MovieListBonusOff != null)
				{
					@Html.Partial("MovieListMini2", Model.MovieListBonusOff)
				}
			</div>

			@*================================================================================================================================== PIE CHART ==== *@

			<div class="clearfix"></div>
			<div class="row-divider"> </div>

			<div id="piechart_3d" class="chart-responsive-pie"></div>

			@*================================================================================================================================== BONUS COMP ==== *@
			@* TODO - Put this in a partial view. *@

			<div style="border: solid; border-radius: 4px; border-width: 1px; padding: 8px;">
				<h4>
					Bonus Comparisons
					<div class="btn btn-info btn-xs" style="font-size: large;" data-toggle="tooltip" data-placement="bottom"
						 title="The table below compares ALL of the movies to the MOST efficient one.
								The Difference column is the dollar amount of gain, and the % Difference is just that; Difference divided the actual earnings (percentage gain).
								The MOST efficient movie shows how much it would have to drop to match second place.">
						<span class="glyphicon glyphicon-info-sign" aria-hidden="true"></span>
					</div>
				</h4>

				@*<div class="col-sm-1 hidden-xs" style="font-weight: bold;">Rank</div>*@
				<div class="col-sm-4 hidden-xs" style="font-weight: bold;">Name</div>
				<div class="col-sm-1 hidden-xs" style="font-weight: bold;">BUX</div>
				<div class="col-sm-2 hidden-xs" style="font-weight: bold; text-align: right;">Earnings</div>
				<div class="col-sm-1 hidden-xs" style="font-weight: bold; text-align: center;">Efficiency</div>
				<div class="col-sm-4 hidden-xs" style="font-weight: bold; text-align: center;">Difference</div>

				@{
					if (movieList.Count > 0)
					{
						var mostEfficient = movieList.OrderByDescending(item => item.Efficiency).FirstOrDefault();

						movieCount = 0;

						foreach (var movie in movieList.OrderByDescending(item => item.Efficiency))
						{
							var backgroundColor = movieCount == 0 ? "background-color: lightgreen;" : (movieCount % 2 == 0 ? "background-color: lightgrey;" : string.Empty);
							var rank = Model.Rank(movie);

							@*<div class="col-sm-1 hidden-xs" style="@backgroundColor text-align: right;">@rank</div>*@
							<div class="col-xs-12 col-sm-4" style="@backgroundColor font-weight: bold;">@movie.Name</div>
							<div class="col-xs-3 hidden-sm hidden-md hidden-lg" style="@backgroundColor font-weight: bold;">BUX:</div>
							<div class="col-xs-3 col-sm-1" style="@backgroundColor text-align: right;">@movie.Cost</div>

							<div class="col-xs-3 hidden-sm hidden-md hidden-lg" style="@backgroundColor font-weight: bold;">Earnings:</div>
							<div class="col-xs-3 col-sm-2" style="@backgroundColor text-align: right;">@string.Format("{0:N0}", movie.Earnings)</div>

							<div class="col-xs-3 hidden-sm hidden-md hidden-lg" style="@backgroundColor font-weight: bold;">Efficiency:</div>
							<div class="col-xs-3 col-sm-1" style="@backgroundColor text-align: right;">@string.Format("{0:N2}", movie.Efficiency / 10m)</div>

							<div class="col-xs-6 hidden-sm hidden-md hidden-lg" style="@backgroundColor">--</div>

							<div class="col-xs-3 hidden-sm hidden-md hidden-lg" style="@backgroundColor font-weight: bold;">Difference:</div>

							if (movie.EarningsBase > 0)
							{
								var nextRankedMovie = movieList.FirstOrDefault(item => Model.Rank(item) == rank + 1);

								// Compute difference columns.

								if (rank == 1)
								{
									if (nextRankedMovie != null)
									{
										//How much does the top rank have to LOSE before it's no longer the TOP
										<div class="col-xs-3 col-sm-2" style="@backgroundColor text-align: right;">@string.Format("{0:N0}", nextRankedMovie.Efficiency * movie.Cost - movie.EarningsBase)</div>
										<div class="col-xs-2 col-sm-1" style="@backgroundColor text-align: right;">--</div>
										<div class="col-xs-2 col-sm-1" style="@backgroundColor text-align: right; color: #cc3333;">@string.Format("{0:N1}%", (nextRankedMovie.Efficiency * movie.Cost - movie.EarningsBase) / movie.EarningsBase * 100)</div>
									}
								}
								else
								{
									//How much does current rank to GAIN to be the TOP

									<div class="col-xs-3 col-sm-2" style="@backgroundColor text-align: right;">@string.Format("{0:N0}", mostEfficient.Efficiency * movie.Cost - movie.EarningsBase)</div>
									<div class="col-xs-2 col-sm-1" style="@backgroundColor text-align: right; color: #33cc33">@string.Format("{0:N1}%", (mostEfficient.Efficiency * movie.Cost - movie.EarningsBase) / movie.EarningsBase * 100)</div>

									if (nextRankedMovie != null)
									{
										<div class="col-xs-2 col-sm-1" style="@backgroundColor text-align: right; color: #cc3333">@string.Format("{0:N1}%", (nextRankedMovie.Efficiency * movie.Cost - movie.EarningsBase) / movie.EarningsBase * 100)</div>
									}
									else
									{
										<div class="col-xs-2 col-sm-1" style="@backgroundColor text-align: right;">--</div>
									}
								}
							}

							movieCount++;

							<div class="clearfix"></div>
						}
					}
				}
			</div>

		</div>

		@* ================================================================================================================================== BOX OFFICE COLUMN ==== *@

		<div class="col-md-4">

			<h2> </h2>

			<a href="@Model.Miner.Url" target="_blank"><strong>File Last Updated: </strong></a>@Model.LastUpdated (Central)

			@if (Model.LastUpdated.AddDays(1) < DateTime.UtcNow.AddHours(-5))
			{
				// Adjust for Central time above.
				<div>
					&nbsp; Last Updated Date is @string.Format("{0:N0}", (DateTime.UtcNow.AddHours(-5) - Model.LastUpdated).TotalHours) hours old.
					<span class="glyphicon glyphicon-info-sign" aria-hidden="true" style="color: red"></span>
				</div>
			}

			<div class="row-divider"> </div>

			<table>
				@{
					movieCount = 1;

					while (movieCount <= movieList.Count)
					{
						<tr>
							@for (int col = 0; col < 5 && movieCount <= movieList.Count; col++)
							{
								var movie = movieList[movieCount - 1];

								var boId = string.Format("boId{0}", movieCount);
								var name = string.Format("BoxOffice{0}", movieCount);

								// TODO: May want to use a utility to speed up the reflection.

								var valueString = string.Format("{0}{1:N0}", Model.IsScaled ? "$" : string.Empty, movie.Earnings);
								var backgroundStyle = (Model.Rank(movie) == 1) ? "box-shadow: 2px 4px 8px 0px green;" : "box-shadow: 2px 4px 8px 0px grey";
								var labelBackgroundColor = movie.IsNew ? "lightgreen" : "white";

								<td style="padding: 3px;">

									<div data-toggle="tooltip" data-placement="top"
										 title="@string.Format("{0} - {1:N0} BUX{2}", movie.Name, movie.Cost, (movie.IsNew && (!movie.Day.HasValue || movie.Day == DayOfWeek.Friday)) ? " (includes preview night)" : string.Empty)">

										<div style="position: relative; width: 0; height: 0">
											<span class="badge badge-pill badge-light"
												  style="position: absolute; left: 30px; top: 5px;"
												  data-toggle="tooltip"
												  data-placement="right">
												@((movie.EarningsBase / totalBoxOffice * 100).ToString("N1")) %
											</span>
										</div>

										<img class="img-responsive img-rounded" style="@backgroundStyle" src="@movie.ImageUrl" />

										<div style="position: relative; top: -60px;">
											<div name="@name"
												 id="@boId"
												 style="padding: 0px 3px 0px 3px; margin: 4px; text-align: center; width: 90px; background: @labelBackgroundColor; opacity: 0.7;">
												@valueString
											</div>
										</div>
									</div>
								</td>

								movieCount++;
							}
						</tr>
					}
				}
			</table>
		</div>
	</div>
}
