@model MoviePicker.WebApp.ViewModels.PicksViewModel

@{
	ViewBag.Title = "Picks - Obsolete Page";
}

<h2>@ViewBag.Title</h2>
<h5>weekend ending @Model.Miners.First().Movies.First().WeekendEnding.ToShortDateString() (@Model.Duration.ToString("N0") ms)</h5>

<h3>Deciphering Picks</h3>

<div class="row">
	<div class="col-sm-1"> </div>
	<div class="col-sm-8">
		There are two tables that show the picks WITH the bonus ON and with it turned off.
		The third table shows how the efficiencies stack up.  <strong>REMEMBER</strong>, these are <strong>YOUR</strong> numbers.
		The other percentages are the values that those movies would have to GAIN if the top ranked movie held its number.
		I feel like this table is more helpful than knowing what the 2nd, 3rd, etc. slots will be.
		This may sway your decision on what your bonus movie might be.

		@if (Model.IsTracking)
		{
			<div class="row-divider"> </div>

			<a class="btn btn-info btn-xs"
			   href="@string.Format("Tracking?{0}", Request.QueryString)"
			   data-toggle="tooltip"
			   data-placement="bottom"
			   title="Click to track all the miners against the estimates...">
				<h4>
					Track your picks with the estimates...
				</h4>
			</a>
		}
		else
		{
			<a class="btn btn-info btn-xs"
			   href="@string.Format("MorePicks?{0}", Request.QueryString)"
			   data-toggle="tooltip"
			   data-placement="bottom"
			   title="View the top picks...">
				<h4>
					More Picks... Top few for bonus ON and OFF (this is a bit slow... please be patient.)
				</h4>
			</a>
		}

	</div>
</div>

@*
	Remove sim button for now since this affects the response time and does NOT return in a timely manner.

	<h5>@Html.ActionLink("Sim", "Simulation", null, htmlAttributes: new { @class = "btn btn-info btn-sm" })</h5>
*@

@* ========================================================================================== FORECAST WEIGHTS*@

<div class="row-divider"> </div>

<table class="table">
	<thead>
		<tr><th>Forecast Weights</th></tr>
		<tr>
			@foreach (var miner in Model.Miners.Where(item => !item.IsHidden))
			{
				<th>
					@miner.Abbreviation
				</th>
			}
		</tr>

	</thead>
	<tbody>
		<tr>
			@foreach (var miner in Model.Miners.Where(item => !item.IsHidden))
			{
				<th>
					@miner.Weight
				</th>
			}
		</tr>
	</tbody>
</table>

<div class="row">
	<div class="col-sm-3">
		<a class="btn btn-info btn-xs"
		   @* Generate a unique ID so Twitter won't cache the image and share them to other tweets. *@
		   href="@string.Format("ShareBonusOnPicks?{0}&id={1}", Request.QueryString, Guid.NewGuid())"
		   data-toggle="tooltip"
		   data-placement="bottom"
		   title="Click to share your Bonus ON picks...">
			<h4>
				Share Bonus is ON&nbsp;&nbsp;&nbsp;<span class="glyphicon glyphicon-share" aria-hidden="true"></span>
			</h4>
		</a>
	</div>

	@Html.Partial("MovieListMini", Model.MovieList)
</div>

<div class="row-divider"> </div>

<div class="row">
	<div class="col-sm-3">
		<a class="btn btn-info btn-xs"
		   @* Generate a unique ID so Twitter won't cache the image and share them to other tweets. *@
		   href="@string.Format("ShareBonusOffPicks?{0}&id={1}", Request.QueryString, Guid.NewGuid())"
		   data-toggle="tooltip"
		   data-placement="bottom"
		   title="Click to share your Bonus OFF picks...">
			<h4>
				Share Bonus is OFF &nbsp;&nbsp;&nbsp;<span class="glyphicon glyphicon-share" aria-hidden="true"></span>
			</h4>
		</a>
	</div>

	@Html.Partial("MovieListMini", Model.MovieListBonusOff)
</div>

<div class="row">
	<div class="col-lg-6">
		<div class="col-sm-3">
			<h4></h4>
		</div>

	</div>

	<div class="col-lg-6">
		<div class="col-sm-3">
			<h4></h4>
		</div>

	</div>
</div>

@if (Model.IsTracking)
{
	<div class="row-divider"> </div>

	<h4>Estimated Perfect Pick</h4>

	<div class="row">
		<div class="col-lg-6">
			<table class="table table-striped">
				<thead>
					<tr>
						<th>Your Pick</th>
						<th>Predicted</th>
						<th>Estimated BO</th>
						<th>PP Diff</th>
						<th>PP Diff %</th>
					</tr>
				</thead>
				<tbody>

					@foreach (var pick in Model.MovieList.Picks)
					{
						<tr>
							<td>Bonus ON</td>
							<td>@string.Format("{0:N0}", Model.MovieList.TotalPicksFromComparison)</td>
							<td>@string.Format("{0:N0}", pick.TotalEarnings)</td>
							<td>@string.Format("{0:N0}", Model.MovieList.TotalPicksFromComparison - pick.TotalEarnings)</td>
							<td>@string.Format("{0:F2} %", pick.TotalEarnings > 0 ? (Model.MovieList.TotalPicksFromComparison - pick.TotalEarnings) / Model.MovieList.TotalPicksFromComparison * 100 : 0)</td>
						</tr>
					}

					@foreach (var pick in Model.MovieListBonusOff.Picks)
					{
						<tr>
							<td>Bonus OFF</td>
							<td>@string.Format("{0:N0}", Model.MovieListBonusOff.TotalPicksFromComparison)</td>
							<td>@string.Format("{0:N0}", pick.TotalEarnings)</td>
							<td>@string.Format("{0:N0}", Model.MovieListBonusOff.TotalPicksFromComparison - pick.TotalEarnings)</td>
							<td>@string.Format("{0:F2} %", pick.TotalEarnings > 0 ? (Model.MovieListBonusOff.TotalPicksFromComparison - pick.TotalEarnings) / Model.MovieListBonusOff.TotalPicksFromComparison * 100 : 0)</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	</div>
}

<div class="row-divider"> </div>

<div class="row">
	<div class="col-sm-1"> </div>
	<div class="col-sm-8">
		The table below compares ALL of the movies to the MOST efficient one.
		The Bonus Earnings column is the value that the movie WOULD need to have the top efficiency or at least MATCH top efficiency.
		The Difference column is the dollar amount of gain, and the % Difference is just that; Difference divided the actual earnings (percentage gain).
		The MOST efficient movie shows how much it would have to drop to match second place.
	</div>
</div>

<div class="row-divider"> </div>

<h4>Bonus Comparisons</h4>

<div class="row">
	<div class="col-lg-12">

		<table class="table table-striped">
			<thead>
				<tr>
					<th style="text-align: center;">BUX</th>
					<th style="text-align: center;">Name</th>
					<th style="text-align: center;">Earnings</th>
					<th style="text-align: center;">Efficiency</th>
					<th style="text-align: center;">Rank</th>
					<th style="text-align: center;">Bonus Earnings</th>
					<th style="text-align: center;">Difference</th>
					<th colspan="2" style="text-align: center;">% Difference</th>
				</tr>
			</thead>
			<tbody>
				@{
					var mostEfficient = Model.Movies.OrderByDescending(item => item.Efficiency).First();

					foreach (var movie in Model.Movies.OrderByDescending(item => item.Efficiency))
					{
						var rank = Model.Rank(movie);
						//var rankStyle = rank <= 5 ? "text-align: right; font-weight: bold; color: #33cc33" : "text-align: right";
						var rankStyle1 = rank == 1 ? "text-align: right; font-weight: bold; color: #33cc33" : "text-align: right";

						<tr>
							<td style="text-align: right">@movie.Cost</td>
							<td>@movie.Name</td>
							<td style="text-align: right">@movie.EarningsBase.ToString("N0")</td>
							<td style="@rankStyle1">@string.Format("{0}{1:N0}", rank == 1 ? "* " : string.Empty, movie.Efficiency)</td>
							<td>@rank</td>
							<td style="text-align: right">@string.Format("{0:N0}", mostEfficient.Efficiency * movie.Cost)</td>

							@if (movie.EarningsBase > 0)
							{
								var nextRankedMovie = Model.Movies.FirstOrDefault(item => Model.Rank(item) == rank + 1);

								// Compute difference columns.

								if (rank == 1)
								{
									if (nextRankedMovie != null)
									{
										//How much does the top rank have to LOSE before it's no longer the TOP
										<td style="text-align: right">@string.Format("{0:N0}", nextRankedMovie.Efficiency * movie.Cost - movie.EarningsBase)</td>
										<td></td>
										<td style="text-align: right; font-weight: bold; color: #cc3333">@string.Format("{0:N2}%", (nextRankedMovie.Efficiency * movie.Cost - movie.EarningsBase) / movie.EarningsBase * 100)</td>
									}
								}
								else
								{
									<td style="text-align: right">@string.Format("{0:N0}", mostEfficient.Efficiency * movie.Cost - movie.EarningsBase)</td>
									<td style="text-align: right; font-weight: bold; color: #33cc33">@string.Format("{0:N2}%", (mostEfficient.Efficiency * movie.Cost - movie.EarningsBase) / movie.EarningsBase * 100)</td>

									if (nextRankedMovie != null)
									{
										<td style="text-align: right; font-weight: bold; color: #cc3333">@string.Format("{0:N2}%", (nextRankedMovie.Efficiency * movie.Cost - movie.EarningsBase) / movie.EarningsBase * 100)</td>
									}
									else
									{
										<td></td>
									}
								}
							}
						</tr>
					}
				}
			</tbody>
		</table>
	</div>
</div>
