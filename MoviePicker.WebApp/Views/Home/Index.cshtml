@model MoviePicker.WebApp.ViewModels.PicksViewModel

@using MovieMiner;
@using MoviePicker.Common.Interfaces;
@using MoviePicker.WebApp.Utilities;
@using MoviePicker.WebApp.Models;
@using System.Text;

@{
	ViewBag.Title = "Home";
}

<script src="~/Scripts/zGlobal.js" type="text/javascript"></script>
<script src="~/Scripts/zIndex.js" type="text/javascript"></script>
<script src="~/Scripts/zIndexCalculate.js" type="text/javascript"></script>

@{
	// FML Miner should have the game end date.

	var weekendEnding = Model.Miners.First().Movies?.FirstOrDefault()?.WeekendEnding.ToString(Constants.FORMAT_DAY_DATE);

	int movieCount = 1;     // This scope is pretty far, sorry  :(

	var compoundMovie = Model.Miners.FirstOrDefault(miner => miner.CompoundMovie != null)?.CompoundMovie;

	<div class="row">

		@* ================================================================================================================================== LEFT COLUMN ==== *@

		<div class="col-md-6 col-md-offset-1">

			@* =============================================================================================== TITLE ==== *@

			<div id="titleSection">
				<div class="col-sm-8 col-sm-push-4">
					<h2>
						Welcome to @Constants.APPLICATION_NAME
					</h2>
					<h4>
						Weekend Ending: @weekendEnding (<span id="durationId">@Model.Duration.ToString("N0")</span> ms)
					</h4>
				</div>

				<div class="col-xs-4 col-sm-pull-8 hidden-sm hidden-md hidden-lg">
					<img class="img-responsive" src="~/Images/MooveePickerCow512x512.png" width="200" style="vertical-align: top;" />
				</div>

				<div class="col-sm-8 col-sm-push-4">
					This website is used to aggregate box office movie data for use in the <a href="https://fantasymovieleague.com/" target="_blank">Fantasy Movie League</a>  game.
					This will help <strong>YOU</strong> gather the data so you can make better projections for your weekly picks.
					You may use the weights to determine how well you "trust" each source to generate your own numbers and then "Pick" your line-up.
					<br />

					@Html.ActionLink("Old Look", "IndexOld", ViewUtility.RequestParamsToDynamic(Request), new { @class = "btn btn-info btn-sm" })

					@*@Html.ActionLink("Wide Look", "IndexWide", ViewUtility.RequestParamsToDynamic(Request), new { @class = "btn btn-info btn-sm" })*@

					<a class="btn btn-success" style="margin-left: 70px;"
					   onclick="navigateToExplicit('@string.Format("/Home/ExpertPicks?{0}", Request.QueryString)')"
					   data-toggle="tooltip"
					   data-placement="bottom"
					   title="Experts League - Click to see the available picks by the experts..."><span class="glyphicon glyphicon-align-justify" aria-hidden="true"></span></a>

					<a class="btn btn-xs btn-info" style="margin-left: 10px;"
					   onclick="clickCollapseTitle()"
					   data-toggle="tooltip"
					   data-placement="top"
					   title="Collapse title area"><span class="glyphicon glyphicon-collapse-up" aria-hidden="true"></span></a>
				</div>

				<div class="hidden-xs col-xs-4 col-sm-pull-8" style="display: inline-block; float: none; vertical-align: middle !important;">
					<img class="img-responsive" src="~/Images/MooveePickerCow512x512.png" width="200" />
				</div>
			</div>

			<div class="clearfix"></div>
			<div class="row-divider"> </div>

			<div class="col-lg-10">
				<div id="picksColumn">
					@if (Model.MovieListPerfectPick != null)
					{
						@Html.Partial("MovieListMini2", Model.MovieListPerfectPick)
					}

					@if (Model.MovieList != null)
					{
						@Html.Partial("MovieListMini2", Model.MovieList)
					}

					@if (Model.MovieListBonusOff != null)
					{
						@Html.Partial("MovieListMini2", Model.MovieListBonusOff)
					}
				</div>
			</div>

			<div class="col-lg-2">
				<input class="btn btn-success"
					   style="margin-top: 10px;"
					   onclick="clickPicks()"
					   type="button"
					   value="Calculate"
					   data-toggle="tooltip"
					   data-placement="bottom"
					   title="Click to recalculate page and set the URL to the current values...">

				@*<a class="btn btn-info"
					   style="margin-top: 10px;"
					   onclick="clickMorePicks()"
					   data-toggle="tooltip"
					   data-placement="bottom"
					   title="View the top picks for both bonus ON and OFF (this is a bit slow... please be patient.)">
						More Picks...
					</a>*@

				@if (Model.IsTracking)
				{
					<input class="btn btn-info"
						   style="margin-top: 10px;"
						   onclick="clickTracking(@string.Format("'{0}'", Guid.NewGuid()))"
						   type="button"
						   value="Perf Pick Comp"
						   data-toggle="tooltip"
						   data-placement="bottom"
						   title="Click to track all the experts against the estimates and Perfect Pick for each movie..." />
				}

				<a id="showTitle" class="btn btn-xs btn-info" style="display: none"
				   onclick="clickShowTitle()"
				   data-toggle="tooltip"
				   data-placement="bottom"
				   title="Show title area"><span class="glyphicon glyphicon-collapse-down" aria-hidden="true"></span></a>
			</div>

			<div class="clearfix"></div>
			<div class="row-divider"> </div>

			<ul class="nav nav-tabs">
				<li class="active"><a data-toggle="tab" href="#menu1">Bonus Comparisons</a></li>
				<li><a data-toggle="tab" href="#menu2">Theater Counts</a></li>
			</ul>

			<div class="tab-content">
				<div id="menu1" class="tab-pane fade in active">

					@* ================================================================================================================================== BONUS COMPARISON COLUMN ==== *@

					@* TODO - Put this in a partial view. *@

					<div style="border: solid; border-radius: 4px; border-width: 1px; padding: 8px;">
						<h4>
							Bonus Comparisons
							<span class="btn btn-info btn-xs" style="font-size: large;" data-toggle="tooltip" data-placement="bottom"
								  title="The table below compares ALL of the movies to the MOST efficient one.
								The Difference column is the dollar amount of gain, and the % Difference is just that; Difference divided the actual earnings (percentage gain).
								The MOST efficient movie shows how much it would have to drop to match second place.">
								<span class="glyphicon glyphicon-info-sign" aria-hidden="true"></span>
							</span>
						</h4>

						@*<div class="col-sm-1 hidden-xs" style="font-weight: bold;">Rank</div>*@
						<div class="col-sm-4 hidden-xs" style="font-weight: bold;">Name</div>
						<div class="col-sm-1 hidden-xs" style="font-weight: bold;">BUX</div>
						<div class="col-sm-2 hidden-xs" style="font-weight: bold; text-align: right;">Earnings</div>
						<div class="col-sm-1 hidden-xs" style="font-weight: bold; text-align: center;">Efficiency</div>
						<div class="col-sm-4 hidden-xs" style="font-weight: bold; text-align: center;">Difference</div>

						@{
							if (Model.Movies.Count() > 0)
							{
								var mostEfficient = Model.Movies.OrderByDescending(item => item.Efficiency).FirstOrDefault();

								movieCount = 0;

								foreach (var movie in Model.Movies.OrderByDescending(item => item.Efficiency))
								{
									var backgroundColor = movieCount == 0 ? "background-color: lightgreen;" : (movieCount % 2 == 0 ? "background-color: lightgrey;" : string.Empty);
									var rank = Model.Rank(movie);

									// You HAVE to use movieCount as the control id since this table is ORDER based (the movies CAN change order) versus cost based like the box office table.

									<div id="@string.Format("bonusCompMovieName{0}", movieCount)"
										 class="col-xs-12 col-sm-4"
										 style="@backgroundColor font-weight: bold;">
										@movie.Name
									</div>

									<div class="col-xs-3 hidden-sm hidden-md hidden-lg"
										 style="@backgroundColor font-weight: bold;">BUX:</div>

									<div id="@string.Format("bonusCompMovieCost{0}", movieCount)"
										 class="col-xs-3 col-sm-1"
										 style="@backgroundColor text-align: right;">
										@movie.Cost
									</div>

									<div class="col-xs-3 hidden-sm hidden-md hidden-lg"
										 style="@backgroundColor font-weight: bold;">Earnings:</div>

									<div id="@string.Format("bonusCompMovieEarnings{0}", movieCount)"
										 class="col-xs-3 col-sm-2"
										 style="@backgroundColor text-align: right;">
										@string.Format("{0:N0}", movie.Earnings)
									</div>

									<div class="col-xs-3 hidden-sm hidden-md hidden-lg"
										 style="@backgroundColor font-weight: bold;">Efficiency:</div>
									<div id="@string.Format("bonusCompMovieEfficiency{0}", movieCount)"
										 class="col-xs-3 col-sm-1"
										 style="@backgroundColor text-align: right;">
										@string.Format("{0:N2}", movie.Efficiency / 1000m)
									</div>

									<div class="col-xs-6 hidden-sm hidden-md hidden-lg" style="@backgroundColor">--</div>

									<div class="col-xs-3 hidden-sm hidden-md hidden-lg" style="@backgroundColor font-weight: bold;">Difference:</div>

									if (movie.EarningsBase > 0)
									{
										var nextRankedMovie = Model.Movies.FirstOrDefault(item => Model.Rank(item) == rank + 1);

										// Compute difference columns.

										if (rank == 1)
										{
											if (nextRankedMovie != null)
											{
												//How much does the top rank have to LOSE before it's no longer the TOP

												<div id="@string.Format("bonusCompDifference{0}", movieCount)"
													 class="col-xs-3 col-sm-2"
													 style="@backgroundColor text-align: right;">
													@string.Format("{0:N0}", nextRankedMovie.Efficiency * movie.Cost - movie.EarningsBase)
												</div>
												<div id="@string.Format("bonusCompDiffPctUp{0}", movieCount)"
													 class="col-xs-2 col-sm-1"
													 style="@backgroundColor text-align: right;">--</div>
												<div id="@string.Format("bonusCompDiffPctDown{0}", movieCount)"
													 class="col-xs-2 col-sm-1"
													 style="@backgroundColor text-align: right; color: #cc3333;">
													@string.Format("{0:N1}%", (nextRankedMovie.Efficiency * movie.Cost - movie.EarningsBase) / movie.EarningsBase * 100)
												</div>
											}
											else
											{
												// Still have to build the scaffolding.

												<div id="@string.Format("bonusCompDifference{0}", movieCount)"
													 class="col-xs-3 col-sm-2"
													 style="@backgroundColor text-align: right;">--</div>
												<div id="@string.Format("bonusCompDiffPctUp{0}", movieCount)"
													 class="col-xs-2 col-sm-1"
													 style="@backgroundColor text-align: right; color: #33cc33">--</div>
												<div id="@string.Format("bonusCompDiffPctDown{0}", movieCount)"
													 class="col-xs-2 col-sm-1"
													 style="@backgroundColor text-align: right; color: #cc3333">--</div>
											}
										}
										else
										{
											//How much does current rank to GAIN to be the TOP

											<div id="@string.Format("bonusCompDifference{0}", movieCount)"
												 class="col-xs-3 col-sm-2"
												 style="@backgroundColor text-align: right;">
												@string.Format("{0:N0}", mostEfficient.Efficiency * movie.Cost - movie.EarningsBase)
											</div>
											<div id="@string.Format("bonusCompDiffPctUp{0}", movieCount)"
												 class="col-xs-2 col-sm-1"
												 style="@backgroundColor text-align: right; color: #33cc33">
												@string.Format("{0:N1}%", (mostEfficient.Efficiency * movie.Cost - movie.EarningsBase) / movie.EarningsBase * 100)
											</div>

											//How much does the current rank have to LOSE before it's no longer that rank

											if (nextRankedMovie != null)
											{
												<div id="@string.Format("bonusCompDiffPctDown{0}", movieCount)"
													 class="col-xs-2 col-sm-1"
													 style="@backgroundColor text-align: right; color: #cc3333">
													@string.Format("{0:N1}%", (nextRankedMovie.Efficiency * movie.Cost - movie.EarningsBase) / movie.EarningsBase * 100)
												</div>
											}
											else
											{
												<div id="@string.Format("bonusCompDiffPctDown{0}", movieCount)"
													 class="col-xs-2 col-sm-1"
													 style="@backgroundColor text-align: right;">--</div>
											}
										}
									}
									else
									{
										// Build the scaffolding anyway

										<div id="@string.Format("bonusCompDifference{0}", movieCount)"
											 class="col-xs-3 col-sm-2"
											 style="@backgroundColor text-align: right;">
											@string.Format("{0:N0}", mostEfficient.Efficiency * movie.Cost - movie.EarningsBase)
										</div>

										<div id="@string.Format("bonusCompDiffPctUp{0}", movieCount)"
											 class="col-xs-2 col-sm-1"
											 style="@backgroundColor text-align: right; color: #33cc33">--</div>

										<div id="@string.Format("bonusCompDiffPctDown{0}", movieCount)"
											 class="col-xs-2 col-sm-1"
											 style="@backgroundColor text-align: right; color: #cc3333">--</div>
									}

									movieCount++;

									<div class="clearfix"></div>
								}
							}
						}
					</div>

				</div>

				<div id="menu2" class="tab-pane fade">
					@* ================================================================================================================================== THEATER COUNT COMPARISON COLUMN ==== *@

					@* TODO - Put this in a partial view. *@

					<div style="border: solid; border-radius: 4px; border-width: 1px; padding: 8px;">
						<h4>
							Theater Counts
							<span class="btn btn-info btn-xs" style="font-size: large;" data-toggle="tooltip" data-placement="bottom"
								  title="The table below contains theater counts and efficiencies ($$ / theater) as well as last week (where applicable).">
								<span class="glyphicon glyphicon-info-sign" aria-hidden="true"></span>
							</span>
						</h4>

						@*<div class="col-sm-1 hidden-xs" style="font-weight: bold;">Rank</div>*@
						<div class="col-sm-4 hidden-xs" style="font-weight: bold;">Name</div>
						<div class="col-sm-1 hidden-xs" style="font-weight: bold; text-align: right;">
							<a class="btn btn-info btn-xs"
							   href="@Model.Miners.ToList()[MinerModel.MOJO_THEATER_INDEX].UrlSource">Count</a>
						</div>
						<div class="col-sm-2 hidden-xs" style="font-weight: bold; text-align: right;">Earnings</div>
						<div class="col-sm-1 hidden-xs" style="font-weight: bold; text-align: right;">$ / Thtr</div>
						<div class="col-sm-1 hidden-xs" style="font-weight: bold; text-align: right;">
							<a class="btn btn-info btn-xs"
							   href="@Model.Miners.ToList()[MinerModel.MOJO_LAST_INDEX].UrlSource">Last Count</a>
						</div>
						<div class="col-sm-2 hidden-xs" style="font-weight: bold; text-align: right;">$ / Thtr</div>
						<div class="col-sm-1 hidden-xs" style="font-weight: bold; text-align: right;">Diff</div>

						<div class="clearfix"></div>

						@{
							if (Model.Movies.Count() > 0)
							{
								var mostEfficient = Model.Movies.OrderByDescending(item => item.Efficiency).FirstOrDefault();

								movieCount = 0;

								foreach (var movie in Model.Movies.OrderByDescending(item => item.TheaterEfficiency))
								{
									var backgroundColor = movieCount % 2 == 0 ? "background-color: lightgrey;" : string.Empty;
									var lastWeek = Model.Miners.Last().Movies?.FirstOrDefault(item => item.Name == movie.Name);

									// You HAVE to use movieCount as the control id since this table is ORDER based (the movies CAN change order) versus cost based like the box office table.

									<div id="@string.Format("theaterCountName{0}", movieCount)"
										 class="col-xs-12 col-sm-4"
										 style="@backgroundColor font-weight: bold;">
										@movie.Name
									</div>

									<div class="col-xs-3 hidden-sm hidden-md hidden-lg"
										 style="@backgroundColor font-weight: bold;">
										Count:
									</div>
									<div id="@string.Format("theaterCount{0}", movieCount)"
										 class="col-xs-3 col-sm-1"
										 style="@backgroundColor text-align: right;">
										@string.Format("{0:N0}", movie.TheaterCount)
									</div>

									<div class="col-xs-3 hidden-sm hidden-md hidden-lg"
										 style="@backgroundColor font-weight: bold;">Earnings:</div>
									<div id="@string.Format("theaterCountEarnings{0}", movieCount)"
										 class="col-xs-3 col-sm-2"
										 style="@backgroundColor text-align: right;">
										@string.Format("{0:N0}", movie.Earnings)
									</div>

									<div class="col-xs-3 hidden-sm hidden-md hidden-lg"
										 style="@backgroundColor font-weight: bold;">Efficiency:</div>
									<div id="@string.Format("theaterCountEfficiency{0}", movieCount)"
										 class="col-xs-3 col-sm-1"
										 style="@backgroundColor text-align: right;">
										@string.Format("{0:N0}", movie.TheaterEfficiency)
									</div>

									if (lastWeek != null)
									{
										var textColor = "color: black;";

										if (movie.TheaterCount - lastWeek.TheaterCount > 0)
										{
											textColor = "color: #33cc33;";
										}
										else if (movie.TheaterCount - lastWeek.TheaterCount < 0)
										{
											textColor = "color: #cc3333;";
										}

										<div class="col-xs-3 hidden-sm hidden-md hidden-lg"
											 style="@backgroundColor font-weight: bold;">
											Last Count:
										</div>
										<div id="@string.Format("theaterCountLast{0}", movieCount)"
											 class="col-xs-3 col-sm-1"
											 style="@backgroundColor text-align: right;">
											@string.Format("{0:N0}", lastWeek.TheaterCount)
										</div>

										<div class="col-xs-3 hidden-sm hidden-md hidden-lg"
											 style="@backgroundColor font-weight: bold;">Last Wk Eff:</div>
										<div id="@string.Format("theaterCountLastEfficiency{0}", movieCount)"
											 class="col-xs-3 col-sm-2"
											 style="@backgroundColor text-align: right;">
											@string.Format("{0:N0}", lastWeek.TheaterEfficiency)
										</div>

										<div class="col-xs-3 hidden-sm hidden-md hidden-lg"
											 style="@backgroundColor font-weight: bold;">Difference:</div>
										<div id="@string.Format("theaterCountDifference{0}", movieCount)"
											 class="col-xs-3 col-sm-1"
											 style="@backgroundColor @textColor text-align: right;">
											@string.Format("{0:N0}", movie.TheaterCount - lastWeek.TheaterCount)
										</div>
									}
									else
									{
										// Build scaffolding for dynamic changes.

										<div class="col-xs-3 hidden-sm hidden-md hidden-lg"
											 style="@backgroundColor font-weight: bold;">Last Count:</div>
										<div id="@string.Format("theaterCountLast{0}", movieCount)"
											 class="col-xs-3 col-sm-1"
											 style="@backgroundColor text-align: right;">--</div>

										<div class="col-xs-3 hidden-sm hidden-md hidden-lg"
											 style="@backgroundColor font-weight: bold;">Last Wk Count:</div>
										<div id="@string.Format("theaterCountLastEfficiency{0}", movieCount)"
											 class="col-xs-3 col-sm-2"
											 style="@backgroundColor text-align: right;">--</div>

										<div class="col-xs-3 hidden-sm hidden-md hidden-lg"
											 style="@backgroundColor font-weight: bold;">Difference:</div>
										<div id="@string.Format("theaterCountDifference{0}", movieCount)"
											 class="col-xs-3 col-sm-1"
											 style="@backgroundColor text-align: right;">--</div>
									}

									movieCount++;

									<div class="clearfix"></div>
								}
							}
						}

					</div>
				</div>
			</div>

			<div class="clearfix"></div>
			<div class="row-divider"> </div>

			@{
				var dynamicParms = ViewUtility.RequestParamsToDynamic(Request);

				@Html.ActionLink("Fandango Hourly", "Fandango", dynamicParms
					, new { @class = "btn btn-info btn-sm", style = "margin: 3px;", data_toggle = "tooltip", data_placement = "bottom", title = "A graphical page of hourly Fandango ticket sales hosted by A.K. Valley." })

				@Html.ActionLink("Fandango Weekend Tickets", "FandangoDays", null
					, new { @class = "btn btn-info btn-sm", style = "margin: 3px;", data_toggle = "tooltip", data_placement = "bottom", title = "A graphical page of weekend Fandango ticket sales hosted by A.K. Valley." })

				if (Request.Params["bo"] != null || Request.Params["wl"] != null)
				{
					@Html.ActionLink("Fandango Weekend Estimates", "FandangoDays", dynamicParms
						, new { @class = "btn btn-info btn-sm", style = "margin: 3px;", data_toggle = "tooltip", data_placement = "bottom", title = "A graphical page of weekend Fandango ticket sales hosted by A.K. Valley. (scaled based on YOUR estimates)" })
				}

				@Html.ActionLink("History", "History", dynamicParms
					, new { @class = "btn btn-info btn-sm", style = "margin: 3px;", data_toggle = "tooltip", data_placement = "bottom", title = "A graphical page of historical movie data." })

				@Html.ActionLink("Extract", "ExtractToCSV", dynamicParms
					, new { @class = "btn btn-info btn-sm", style = "margin: 3px;", data_toggle = "tooltip", data_placement = "bottom", title = "A comma separated value file of the mined data which can be loaded into Excel WITH column headers." })

			}

			<div class="clearfix"></div>
			<div class="row-divider"> </div>

			@* ================================================================================================================================== IMPORT COLUMN ==== *@

			<div class="col-xs-5">
				<textarea class="form-control" id="pasteAreaId" rows="4" style="background-color: lightcyan; vertical-align: top;"
						  placeholder="Paste your 15 Box Office values here (use CR/LF to separate values) and then press 'Import'"></textarea>
			</div>

			<div class="col-xs-2">
				<input class="btn btn-info" onclick="clickPasteBoxOffice()" type="button" value="Import" data-toggle="tooltip" data-placement="bottom" title="Click to set Box Office predictions." />
			</div>

		</div>

		@* ================================================================================================================================== RIGHT COLUMN ==== *@

		<div class="col-md-4">

			@* ================================================================================================================================== MINER WEIGHT COLUMN ==== *@

			<table id="minerWeights" class="table table-responsive" style="border: none;">
				<tr>
					@for (int minerCount = MinerModel.TODD_INDEX; minerCount <= MinerModel.BORPT_INDEX; minerCount++)
					{
						// Use indexing to preserve the "hole" of the skipped miner.
						// The control IDs need to be preserved.

						var miner = Model?.Miners.ToList()[minerCount];

						if (!(miner?.IsHidden ?? true))
						{
							var buttonStyle = miner.Movies.Any() ? "btn-success" : "btn-info";
							var weightId = string.Format("weightId{0}", minerCount);
							var name = string.Format("Weight{0}", minerCount);
							//var badge = miner.Movies.Any() ? string.Format("<span class=\"badge badge-pill badge-light\">{0}</span>", miner.Movies.Count) : string.Empty;

							// TODO: May want to use a utility to speed up the reflection.

							var valueString = string.Format("{0:N0}", Model.GetType().GetProperty("Weight" + minerCount)?.GetValue(Model));

							<td>
								<a class="btn @buttonStyle btn-xs"
								   href="@miner.UrlSource"
								   target="_blank"
								   data-toggle="tooltip"
								   data-placement="bottom"
								   title="Click for '@miner.Name' source page... (last updated @string.Format("{0}", ((ICache)miner).LastLoaded.ToString()))">
									@miner.Abbreviation &nbsp;
									@if (miner.Movies.Count > 0)
									{
										<span class="badge badge-pill badge-light"
											  data-toggle="tooltip"
											  data-placement="top"
											  title="Total Movies Estimated">@miner.Movies.Count</span>

										}
								</a>

								<input name="@name"
									   class="form-control"
									   id="@weightId"
									   onblur="weightLostFocus(this.value, @minerCount)"
									   style="background-color: #dfffdf; width: 50px;"
									   type="text"
									   value="@valueString"
									   data-original-value="@valueString"
									   data-val-required="The Weight @minerCount field is required."
									   data-val-number="The field Weight @minerCount must be a number."
									   data-val="true">
							</td>
						}
					}
				</tr>
			</table>

			@* ================================================================================================================================== BOX OFFICE COLUMN ==== *@

			<div id="scrollPostersId" class="fill-screenrelative" style="height: 650px; min-width: 500px; overflow-y: scroll; overflow-x: hidden; white-space: nowrap; -webkit-overflow-scrolling: touch;">
				<table>
					@{
						decimal customCompoundTotal = 0m;

						if (compoundMovie != null)
						{
							customCompoundTotal = Model.BoxOffice1 + Model.BoxOffice2;

							if (Model.Miners.First().Movies[2].Day.HasValue)
							{
								customCompoundTotal += Model.BoxOffice3;
							}
						}

						movieCount = 1;

						while (movieCount <= Model.Miners.First().Movies.Count)
						{
							<tr>
								@for (int col = 0; col < 3 && movieCount <= Model.Miners.First().Movies.Count; col++)
								{
									var movie = Model.Miners.First().Movies[movieCount - 1];

									var boId = string.Format("boId{0}", movie.ControlId);
									var imageId = string.Format("imageId{0}", movie.ControlId);
									var name = string.Format("BoxOffice{0}", movie.ControlId);
									var posterId = string.Format("posterId{0}", movieCount);

									// TODO: May want to use a utility to speed up the reflection.

									var value = (decimal)Model.GetType().GetProperty("BoxOffice" + movieCount)?.GetValue(Model);
									var valueString = string.Format("{0:N0}", value);
									var lastWeek = Model.Miners.Last().Movies?.FirstOrDefault(item => (item.Id != 0 && item.Id == movie.Id) || item.Name == movie.Name);
									var inputBackgroundColor = lastWeek == null ? "lightgreen" : "cyan";
									string boPercentBackgroundColorStyle = null;
									decimal percent = 0;
									var hasRows = false;

									// Build the tooltip from the miner values.

									var toolTip = new StringBuilder();

									toolTip.Append("<table>");

									foreach (var miner in Model.Miners.Where(item => !item.IsHidden).Skip(1))
									{
										var minerMovie = miner.Movies.FirstOrDefault(item => item.Name == movie.Name);

										if (minerMovie != null)
										{
											toolTip.Append($"<tr><td style=\"padding: 5px;\">{miner.Abbreviation}</td><td style=\"padding: 5px;\">");

											if (!string.IsNullOrEmpty(miner.Error) && !string.IsNullOrEmpty(miner.ErrorDetail))
											{
												toolTip.Append(miner.Error);
											}
											else
											{
												toolTip.Append(minerMovie.EarningsBase.ToString("N0"));
											}

											toolTip.Append("</td>");

											if (lastWeek != null && minerMovie != null && lastWeek.EarningsBase > 0)
											{
												percent = (minerMovie.EarningsBase - lastWeek.EarningsBase) / lastWeek.EarningsBase * 100;
												boPercentBackgroundColorStyle = ViewUtility.PercentColorFromLastWeek(percent);

												toolTip.Append($"<td style=\"padding: 4px; color: black; {boPercentBackgroundColorStyle}\">{percent.ToString("N0")}%</td>");
											}
											else
											{
												toolTip.Append("<td></td>");
											}

											toolTip.Append("</tr>");

											hasRows = true;
										}
									}

									if (!hasRows)
									{
										toolTip.Append("<tr><td>No data available (yet)</td></tr>");
									}

									toolTip.Append("</table>");

									boPercentBackgroundColorStyle = "background-color: white;";
									percent = 0;

									var myMovie = Model.Miners.ToList()[MinerModel.MY_INDEX].Movies.FirstOrDefault(item => item.Name == movie.Name);

									if (lastWeek != null && myMovie != null && lastWeek.EarningsBase > 0)
									{
										percent = (myMovie.EarningsBase - lastWeek.EarningsBase) / lastWeek.EarningsBase * 100;
										boPercentBackgroundColorStyle = ViewUtility.PercentColorFromLastWeek(percent);
									}

									var tableIndent = (percent == 0 || percent == -100m) ? "20px" : "2px";
									var backgroundStyle = (Model.Rank(movie) == 1) ? "box-shadow: 2px 4px 8px 0px green;" : "box-shadow: 2px 4px 8px 0px grey;";

									<td style="padding: 3px;">

										<div id="@posterId">

											<div style="position: relative; width: 0; height: 0;">
												@if (movie.TheaterCount > 0)
												{
													var isNew = !(lastWeek != null && (movie.TheaterCount - lastWeek.TheaterCount != 0));
													var leftIndent = isNew ? "50px" : "20px";

													<span class="badge badge-pill badge-light"
														  data-toggle="tooltip"
														  data-placement="@((movieCount - 1) / 3 == 0 ? "bottom" : "top")"
														  title="Theater Count"
														  style="position: absolute; left: @leftIndent; top: 5px;">
														@movie.TheaterCount

														@if (!isNew)
														{
															var theaterDiff = movie.TheaterCount - lastWeek.TheaterCount;

															if (theaterDiff > 0)
															{
																<span class="glyphicon glyphicon-chevron-up" aria-hidden="true" style="color: lawngreen;"></span>
																@(movie.TheaterCount - lastWeek.TheaterCount)
															}
															else
															{
																<span class="glyphicon glyphicon-chevron-down" aria-hidden="true" style="color: red;"></span>
																@(lastWeek.TheaterCount - movie.TheaterCount)
															}
														}
													</span>
												}

												<span class="glyphicon glyphicon-info-sign"
													  aria-hidden="true"
													  data-toggle="tooltip"
													  data-placement="@((movieCount - 1) / 3 == 0 ? "bottom" : "top")"
													  data-template='<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner" style="min-width: 200px; white-space: pre-wrap;"></div><div class="tooltip-extra">@toolTip.ToString()</div></div>'
													  title="@string.Format("{0} - {1:N0} BUX", movie.Name, movie.Cost)"
													  style="position: absolute; left: 110px; top: 5px; color: white; cursor: pointer; border-radius: 5px; background: gray; opacity: 0.8">
												</span>

												<span class="glyphicon glyphicon-remove"
													  aria-hidden="true"
													  data-toggle="tooltip"
													  data-placement="bottom"
													  onclick="clickHidePoster('@posterId')"
													  title="Hide movie"
													  style="position: absolute; left: 140px; top: 5px; color: white; cursor: pointer; background: gray; opacity: 0.8">
												</span>

											</div>

											<img id="@imageId" class="img-responsive img-rounded" style="@backgroundStyle min-height: 220px; min-width: 150px;" src="@movie.ImageUrl" />

											<div style="position: relative; width: 0; height: 0">
												<table style="position: absolute; left: -5px; top: -225px; width: 10px; height: 210px; opacity: 0.7;">
													<tr>
														<td>
															@if (lastWeek != null && value > lastWeek.EarningsBase * 2)
															{
																// Adjust the slider to MORE than 100% since the value is already greater than 100% and the slider won't work.

																var sliderMax = (Math.Round(value / lastWeek.EarningsBase, 0) + 1) * 100;

																<input class="vertical-slider" orient="vertical" id="@string.Format("boSliderId{0}", movie.ControlId)" type="range" onchange="sliderOnChange(this, @movie.ControlId)" min="-100" max="@sliderMax" value="@string.Format("{0}", lastWeek == null ? "0" : percent.ToString("N0"))" />
															}
															else
															{
																<input class="vertical-slider" orient="vertical" id="@string.Format("boSliderId{0}", movie.ControlId)" type="range" onchange="sliderOnChange(this, @movie.ControlId)" min="-100" max="100" value="@string.Format("{0}", lastWeek == null ? "0" : percent.ToString("N0"))" />
															}
														</td>
													</tr>
												</table>
											</div>

											<div style="position: relative; width: 0; height: 0">
												<input name="@name"
													   class="form-control"
													   id="@boId"
													   onblur="boxOfficeLostFocus('@valueString', this.value, @movie.ControlId)"
													   style="position: absolute; left: 20px; top: -40px; background-color: @inputBackgroundColor; width: 100px; opacity: 0.8; box-shadow: inset 0 0 3px #000000"
													   type="text"
													   value="@valueString"
													   data-isnew="@string.Format("{0}", lastWeek == null ? "true" : "false")"
													   data-original-value="@string.Format("{0}", lastWeek == null ? myMovie.EarningsBase : lastWeek.EarningsBase)"
													   data-original-theater-count="@string.Format("{0}", lastWeek == null ? 0 : lastWeek.TheaterCount)"
													   data-val-required="The Box Office @movie.ControlId field is required."
													   data-val-number="The field Box Office @movie.ControlId must be a number."
													   data-val="true">


												@if (movie.Day.HasValue)
												{
													<span class="badge badge-pill badge-dark"
														  data-toggle="tooltip"
														  data-placement="top"
														  title="Percentage of Weekend Total"
														  style="position: absolute; left: 15px; top: -50px; color: dimgrey; background-color: lightskyblue">
														<span class="glyphicon glyphicon-tasks" aria-hidden="true"
															  style="color: dimgrey;"></span>
														<span id="@string.Format("{0}CompoundPct", boId)">@string.Format("{0:N1}%", customCompoundTotal > 0 ? value / customCompoundTotal * 100 : 0)</span>
													</span>
												}

												<span id="@string.Format("{0}Pct", boId)" class="badge badge-pill badge-dark"
													  data-toggle="tooltip"
													  data-placement="top"
													  title="Gain or loss from previous week."
													  style="position: absolute; left: 100px; top: -50px; @boPercentBackgroundColorStyle color: black;">
													@percent.ToString("N0")%
												</span>

												<span id="@string.Format("{0}UpPct", boId)"
													  class="glyphicon glyphicon-triangle-top"
													  aria-hidden="true"
													  style="position: absolute; left: 130px; top: -30px; color: white; cursor: pointer;"
													  onclick="clickChangePercent(this, @movie.ControlId, 1)">
												</span>
												<span id="@string.Format("{0}DownPct", boId)"
													  class="glyphicon glyphicon-triangle-bottom"
													  aria-hidden="true"
													  style="position: absolute; left: 130px; top: -17px; color: white; cursor: pointer;"
													  onclick="clickChangePercent(this, @movie.ControlId, -1)">
												</span>
											</div>

										</div>
									</td>

									movieCount++;
								}
							</tr>

							if (compoundMovie != null && movieCount == 4)
							{
								var toolTipBuilder = new StringBuilder();
								var compoundMovies = Model.Miners.First().Movies.Where(item => item.Day.HasValue).ToList();
								decimal? compoundBuxTotal = (compoundMovies != null && compoundMovies.Any()) ? compoundMovies.Sum(item => item.Cost) : (decimal?)null;

								if (compoundBuxTotal.HasValue && compoundBuxTotal > 0)
								{
									toolTipBuilder.Append("<table>");

									foreach (var movieDay in compoundMovies)
									{
										toolTipBuilder.Append("<tr>");
										toolTipBuilder.Append($"<td>{movieDay.Day.ToString().Substring(0, 3).ToUpper()}</td>");
										toolTipBuilder.Append($"<td style=\"padding-left: 20px;\">{movieDay.Cost / compoundBuxTotal.Value * 100m:N1}%</td>");
										toolTipBuilder.Append("</tr>");
									}

									toolTipBuilder.Append("</table>");
								}

								<tr>
									<td>
										<input class="form-control"
											   id="compoundFieldId"
											   onblur="boxOfficeCompoundLostFocus('@customCompoundTotal', this.value)"
											   type="text"
											   value="@string.Format("{0:N0}", customCompoundTotal)"
											   data-previous-value="@customCompoundTotal"
											   data-val-required="The Compound Box Office field is required."
											   data-val-number="The Compound Box Office field must be a number."
											   data-val="true"
											   style="margin-left: 20px; width: 130px; background-color: lightskyblue; box-shadow: inset 0 0 3px #000000">
									</td>
									<td>
										<span id="compoundUpId"
											  class="glyphicon glyphicon-triangle-bottom"
											  aria-hidden="true"
											  onclick="clickChangeCompoundPercent(-1)"
											  style="cursor: pointer; margin-left: 10px;">
										</span>
										<span id="compoundDownId"
											  class="glyphicon glyphicon-triangle-top"
											  aria-hidden="true"
											  onclick="clickChangeCompoundPercent(1)"
											  style="cursor: pointer; margin-left: 5px;">
										</span>
										<span class="glyphicon glyphicon-tasks" aria-hidden="true"
											  data-toggle="tooltip"
											  data-placement="bottom"
											  data-template='<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner" style="min-width: 200px; white-space: pre-wrap;"></div><div class="tooltip-extra">@toolTipBuilder.ToString()</div></div>'
											  title="BUX Compound Percentages"
											  style="color: dimgrey; margin-left: 15px;"></span>
									</td>
								</tr>
							}
						}
					}
				</table>
			</div>
		</div>

	</div> @* end class="row" *@
}
