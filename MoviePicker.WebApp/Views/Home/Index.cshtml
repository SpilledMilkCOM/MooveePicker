@model  MoviePicker.WebApp.Models.IndexViewModel

@using MoviePicker.Common.Interfaces

@{
	ViewBag.Title = "Home Page";
	const string myColumnFormat = "{0:F0}";
}

<script type="text/javascript">
	function clickRecalc() {
		//alert("clickRecalc")

		var boList = ""
		var weightList = ""

		for (idx = 1; idx <= 15; idx++) {
			if (idx != 1) {
				boList += ","
			}

			boList += $("#boId" + idx).val().replace(",", "").replace("$", "")
		}

		for (idx = 1; idx <= 7; idx++) {
			if (idx != 1) {
				weightList += ","
			}

			// TODO: Request encode this.

			weightList += $("#weightId" + idx).val().replace(",", "").replace("$", "")
		}

		var url = "/home/index?bo=" + boList + "&wl=" + weightList

		var baseUrl = window.location.href

		if (baseUrl != null) {
			var slashIdx = baseUrl.indexOf("/", "https://".length)

			if (slashIdx > 0) {
				baseUrl = baseUrl.substring(0, slashIdx)
			}
		}

		//alert(baseUrl)

		//alert(url)

		window.location.href = baseUrl + url
	}
</script>

<div class="row">
	<div class="col-sm-6">
		<h2>WELCOME</h2>

		This website is used to aggregate box office movie data for use in the <a href="https://fantasymovieleague.com/" target="_blank">Fantasy Movie League</a>  game.
		This will help <strong>YOU</strong> gather the data so you can make better projections for your weekly picks.
		You may use the weights to determine how well you "trust" each source to generate your own numbers and then "Pick" your line-up which will be displayed on another page.
	</div>

	<div class="col-sm-6">
		<h2>Fantasy Movie League Family</h2>

		Not sure how you found the site.  Could have been from a post or a tweet.
		Make sure you follow me on Twitter, that can be found on the @Html.ActionLink("Contact", "Contact") page.
		Other information is on the @Html.ActionLink("About", "About") page.

		<p> </p>
		Please stay tuned as this website will evolve into something that is more helpful with your picks in the future as time permits.
	</div>
</div>

@if (Model.IsTracking)
{
	<h3>Tracking Estimates</h3>

	<div class="row">
		<div class="col-sm-6">
			The estimates are IN!  Below is a table that compares your Custom value to the estimates.  Were you close?
			There's still time as these estimates change over the weekend, but typically not by much since the "experts" are pretty good once the data starts rolling in.
			The differences are whether <strong>your</strong> Custom numbers are higher (+) or lower (-) than the Estimated numbers.  I may switch this depending on the user's preference and what makes more sense.
		</div>
	</div>

	<div class="row">
		<div class="col-sm-8">
			<table class="table table-striped">
				<thead>
					<tr>
						<th style="text-align: center">
							<a class="btn btn-info btn-xs" href="@string.Format("{0}", Model.Miners.FirstOrDefault()?.UrlSource)" data-toggle="tooltip" data-placement="bottom" title="Click for FML BUX source page...">BUX</a>
						</th>
						<th style="text-align: center">Movie</th>
						<th style="text-align: center">
							<a class="btn btn-info btn-xs" href="@string.Format("{0}", Model.Miners.FirstOrDefault()?.UrlSource)" data-toggle="tooltip" data-placement="bottom" title="Click for FML Estimated source page...">Estimated</a>
						</th>
						<th style="text-align: center">Custom</th>
						<th style="text-align: center">Difference</th>
						<th style="text-align: center">% Diff</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var movie in Model.Miners.First().Movies)
					{
						var minerCount = 0;
						IMovie fmlMovie = null;
						IMovie customMovie = null;

						<tr>
							<td style="text-align: right">@movie.Cost</td>
							<td>@movie.Name</td>

							@foreach (var miner in Model.Miners)
							{
								// The first two miners are FML and Custom (MineMine)

								var minerMovie = miner.Movies?.FirstOrDefault(item => item.Name == movie.Name);

								<td style="text-align: right">@string.Format("{0:N0}", minerMovie?.Earnings)</td>

								if (++minerCount == 2)
								{
									customMovie = minerMovie;

									break;
								}
								else
								{
									fmlMovie = minerMovie;
								}
							}

							<td style="text-align: right">@string.Format("{0:N0}", (customMovie?.EarningsBase ?? 0) - fmlMovie.EarningsBase)</td>

							@if (customMovie?.EarningsBase > 0)
							{
								<td style="text-align: right">@string.Format("{0:F2} %", (customMovie.EarningsBase - fmlMovie.EarningsBase) / customMovie.EarningsBase * 100)</td>
							}

						</tr>
					}
				</tbody>
			</table>
		</div>
	</div>
}

<h3>Box Office Forecasts</h3>
<h5>@*@Html.ActionLink("<<", "WeekBack", null, htmlAttributes: new { @class = "btn btn-info btn-sm" })*@ weekend ending @Model.Miners.First().Movies.First().WeekendEnding.ToShortDateString()</h5>

<div class="row">
	<div class="col-sm-6">
		The following table is an aggregation of data for the "play" week ending @Model.Miners.First().Movies.First().WeekendEnding.ToShortDateString() for the Fantasy Movie League website.
		Currently the site aggregates box office data from Todd Thatcher's post on FML, Box Office Pro, Box Office Mojo, Box Office Report, Culture Vulture, and Box Office Prophet.
		These are the "experts" in the field.  YOUR job is to determine who you trust and by how much and apply a weighting mechanism before you make your game picks.
	</div>
</div>

@* Showing the data from ALL of the sources/miners *@

@using (Html.BeginForm("Picks", "Home", null, FormMethod.Post, htmlAttributes: new { @class = "form-horizontal" }))
{
	int movieCount = 1;     // This scope is pretty far, sorry  :(
	bool first = true;

	<table class="table table-striped">
		<thead>
			<tr>
				<th style="text-align: center">
					<a class="btn btn-info btn-xs" href="@string.Format("{0}", Model.Miners.FirstOrDefault()?.UrlSource)" data-toggle="tooltip" data-placement="bottom" title="Click for FML BUX source page...">BUX</a>
				</th>

				<th style="text-align: center">Movie</th>

				@foreach (var miner in Model.Miners.Where(item => !item.IsHidden))
				{
					<th style="text-align: center">
						@if (first)
						{
							first = false;

							<input class="btn btn-info btn-xs" onclick="clickRecalc()" type="button" value="Custom" data-toggle="tooltip" data-placement="bottom" title="Click to apply weights and recalculate Custom column..." />
						}
						else
						{
							<a class="btn btn-info btn-xs" href="@miner.UrlSource" data-toggle="tooltip" data-placement="bottom" title="Click for '@miner.Name' source page...">@miner.Abbreviation</a>

						}
					</th>
					<th></th>
				}
			</tr>
			<tr>
				<td></td>
				<td></td>

				@foreach (var miner in Model.Miners.Where(item => !item.IsHidden))
				{

					if (!string.IsNullOrEmpty(miner.Error))
					{
						<td style="text-align: center; color: #cc3333">@miner.Error</td>
					}
					else
					{
						<td></td>
					}
					<td></td>
				}
			</tr>
		</thead>

		<tbody>
			@foreach (var movie in Model.Miners.First().Movies)
			{
				const string myColumnStyle = "width: 100px;";
				//const string myColumnFormat = "{0:N0}";
				bool isFirst = true;

				<tr>
					<td>@movie.Cost</td>
					<td>@movie.Name</td>

					@foreach (var miner in Model.Miners.Where(item => !item.IsHidden))
					{
						var minerMovie = miner.Movies?.FirstOrDefault(item => item.Name == movie.Name);

						if (isFirst)
						{
							isFirst = false;

							if (1 <= movieCount && movieCount <= 15)
							{
								var id = string.Format("boId{0}", movieCount);
								var name = string.Format("BoxOffice{0}", movieCount);
								// TODO: May want to use a utility to speed up the reflection.
								var value = string.Format("{0:N0}", Model.GetType().GetProperty("BoxOffice" + movieCount)?.GetValue(Model));

								<td>
									@*The majority of this input was taken from Html.TextBoxFor*@

									<input name="@name"
										   class="form-control"
										   id="@id"
										   style="width: 100px;"
										   type="text"
										   value="@value"
										   data-val-required="The Box Office @movieCount field is required."
										   data-val-number="The field Box Office @movieCount must be a number."
										   data-val="true">
								</td>
							}
						}
						else
						{
							<td style="text-align: right">
								@string.Format("{0:N0}", minerMovie?.Earnings)
							</td>
						}

						if (miner != Model.Miners.Last())
						{
							var lastWeek = Model.Miners.Last().Movies?.FirstOrDefault(item => item.Name == movie.Name);
							decimal percent = 0;

							if (lastWeek != null && minerMovie != null && lastWeek.EarningsBase > 0)
							{
								percent = (minerMovie.EarningsBase - lastWeek.EarningsBase) / lastWeek.EarningsBase * 100;
							}

							var bootstrapClass = percent <= -20 ? (percent <= -40 ? "table-danger" : "table-warning")
													: (percent > 0 ? "table-success" : "table-info");

							<td class="@bootstrapClass" style="text-align: right">
								@string.Format("{0}", percent != 0 ? " " + percent.ToString("N0") + "% " : string.Empty)
							</td>
						}
						else
						{
							<td></td>
						}
					}
				</tr>

				movieCount++;
			}

			<tr>
				<td></td>
				<td></td>

				@{
					first = true;
				}

				@foreach (var miner in Model.Miners.Where(item => !item.IsHidden))
				{
					<td style="text-align: center">
						@if (first)
						{
							first = false;
						}
						else
						{
							<a class="btn btn-info btn-xs" href="@miner.UrlSource" data-toggle="tooltip" data-placement="bottom" title="Click for '@miner.Name' source page...">@miner.Abbreviation</a>
						}
					</td>
					<td></td>
				}
			</tr>

			<tr>
				<td>@Html.ActionLink("Extract", "ExtractToCSV", null, htmlAttributes: new { @class = "btn btn-info btn-sm", data_toggle = "tooltip", data_placement = "bottom", title = "Click to extract as CSV text file..." })</td>

				<td>
					<input class="btn btn-info" onclick="clickRecalc()" type="button" value="Apply Weights" data-toggle="tooltip" data-placement="bottom" title="Click to apply weights and recalculate Mine column..." />
				</td>

				@*
					This is pretty brute force to get the values through to the Post.
					TODO: Use reflection to loop through these "flat" properties.
				*@

				<td>
					@Html.TextBoxFor(model => model.Weight1, new { @class = "form-control", id = "weightId1" })
				</td>
				<td></td>
				<td>
					@Html.TextBoxFor(model => model.Weight2, new { @class = "form-control", id = "weightId2" })
				</td>
				<td></td>
				<td>
					@Html.TextBoxFor(model => model.Weight3, new { @class = "form-control", id = "weightId3" })
				</td>
				<td></td>
				<td>
					@Html.TextBoxFor(model => model.Weight4, new { @class = "form-control", id = "weightId4" })
				</td>
				<td></td>
				<td>
					@Html.TextBoxFor(model => model.Weight5, new { @class = "form-control", id = "weightId5" })
				</td>
				<td></td>
				<td>
					@Html.TextBoxFor(model => model.Weight6, new { @class = "form-control", id = "weightId6" })
				</td>
				<td></td>
				<td>
					@Html.TextBoxFor(model => model.Weight7, new { @class = "form-control", id = "weightId7" })
				</td>
				<td></td>
				<td></td>
				<td></td>
			</tr>
		</tbody>
	</table>

	<div class="row">
		<div class="col-sm-1"> </div>

		<div class="col-sm-3">
			<input class="btn btn-success" type="submit" value="Calculate Picks..." />
		</div>
	</div>
					}
