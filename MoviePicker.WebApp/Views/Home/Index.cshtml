@model  MoviePicker.WebApp.Models.IndexViewModel

@using MovieMiner;
@using MoviePicker.Common.Interfaces;
@using MoviePicker.WebApp.Utilities;

@{
	ViewBag.Title = "Home";
	const string myColumnFormat = "{0:F0}";
}

<script type="text/javascript">

	function clickClearWeights(idxStart) {
		if (idxStart == 2) {
			$("#weightId1").val(1)
			$("#weightmId1").val(1)
		}

		for (idx = idxStart; idx <= 7; idx++) {
			$("#weightId" + idx).val(0)
			$("#weightmId" + idx).val(0)
		}
	}

	function clickPasteBoxOffice() {
		var boValues = $("#pasteAreaId").val()
		var splitValues = boValues.split("\n");

		for (idx = 0; idx < 15; idx++) {

			//console.log(idx + " = " + splitValues[idx]);

			if (idx < splitValues.length) {
				$("#boId" + (idx + 1)).val(splitValues[idx].trim())
				$("#bomId" + (idx + 1)).val(splitValues[idx].trim())
			}
			else {
				$("#boId" + (idx + 1)).val(splitValues[idx].trim())
				$("#bomId" + (idx + 1)).val(splitValues[idx].trim())
			}
		}

		// Blank out the field so you know you clicked on something.

		$("#pasteAreaId").val("")
	}

	function clickPicks() {

		var parameters = parseBoxOfficeWeights()

		var url = "/Home/Picks?" + parameters

		var baseUrl = parseBaseUrl()

		window.location.href = baseUrl + url
	}

	function clickTracking() {

		var parameters = parseBoxOfficeWeights()

		var url = "/Home/Tracking?" + parameters

		var baseUrl = parseBaseUrl()

		window.location.href = baseUrl + url
	}

	function clickRecalc(viewName) {

		synchronizeBoxOfficeWeights(viewName);

		var parameters = parseBoxOfficeWeights(viewName)

		var url = "/Home/Index?" + parameters

		var baseUrl = parseBaseUrl()

		window.location.href = baseUrl + url
	}

	function parseBaseUrl() {
		var baseUrl = window.location.href

		if (baseUrl != null) {
			var slashIdx = baseUrl.indexOf("/", "https://".length)

			if (slashIdx > 0) {
				baseUrl = baseUrl.substring(0, slashIdx)
			}
		}

		return baseUrl
	}

	function parseBoxOfficeWeights(viewName) {

		var boList = ""
		var weightList = ""

		// The values should be synchronized so the values can be pulled from one set of fields.

		for (idx = 1; idx <= 15; idx++) {
			if (idx != 1) {
				boList += ","
			}

			// Replace all commas (global g parameter on regular expression)
			boList += $("#boId" + idx).val().replace(/\,/g, "").replace("$", "")
		}

		for (idx = 1; idx <= 7; idx++) {
			if (idx != 1) {
				weightList += ","
			}

			// TODO: Request encode this.

			weightList += $("#weightId" + idx).val().replace(",", "").replace("$", "")
		}

		return "bo=" + boList + "&wl=" + weightList
	}

	function synchronizeBoxOfficeWeights(viewName) {

		// Copies the values from source fields to destination fields.

		var boIdSource = "#boId"
		var weightIdSource = "#weightId"
		var boIdDest = "#bomId"
		var weightIdDest = "#weightmId"

		if (viewName == "card") {
			boIdSource = "#bomId"
			weightIdSource = "#weightmId"
			boIdDest = "#boId"
			weightIdDest = "#weightId"
		}

		for (idx = 1; idx <= 15; idx++) {
			$(boIdDest + idx).val($(boIdSource + idx).val())
		}

		for (idx = 1; idx <= 7; idx++) {
			$(weightIdDest + idx).val($(weightIdSource + idx).val())
		}
	}
</script>

@{
	//var weekendEnding = Model.Miners.First().Movies?.First().WeekendEnding.ToShortDateString();
	var weekendEnding = Model.Miners.First().ContainsEstimates ? MovieDateUtil.GameSunday(isEstimate: Model.Miners.First().ContainsEstimates).ToShortDateString() : Model.Miners.First().Movies?.FirstOrDefault()?.WeekendEnding.ToShortDateString();

	int movieCount = 1;     // This scope is pretty far, sorry  :(
	bool first = true;
}

<div class="row">
	<div class="col-xs-3 col-md-2" style="padding-top: 20px;">
		<img class="img-responsive" src="~/Images/MooveePickerCow512x512.png" width="200" />
	</div>

	<div class="col-xs-9 col-sm-6 col-md-5">
		<h2>
			WELCOME
			<div class="btn btn-info" style="font-size: large;" data-toggle="tooltip" data-placement="bottom" title="The following table is an aggregation of data for the &quot;play&quot; week ending @weekendEnding for the Fantasy Movie League website.
				Currently the site aggregates box office data from Todd Thatcher's post on FML, Box Office Pro, Box Office Mojo, Box Office Report, Culture Vulture, and Box Office Prophet.
				These are the &quot;experts&quot; in the field.  YOUR job is to determine who you trust and by how much and apply a weighting mechanism before you make your game picks.">
				Box Office Forecasts
			</div>
		</h2>

		This website is used to aggregate box office movie data for use in the <a href="https://fantasymovieleague.com/" target="_blank">Fantasy Movie League</a>  game.
		This will help <strong>YOU</strong> gather the data so you can make better projections for your weekly picks.
		You may use the weights to determine how well you "trust" each source to generate your own numbers and then "Pick" your line-up which will be displayed on another page.

		@Html.ActionLink("NEW LOOK! (beta)", "Index2", ViewUtility.RequestParamsToDynamic(Request), new { @class = "btn btn-default btn-sm" })
	</div>

	<div class="col-sm-6 col-md-5">
		<h2>Fantasy Movie League Family</h2>

		Not sure how you found the site.  Could have been from a post or a tweet.
		Make sure you follow me on Twitter, that can be found at the bottom of each page.
		More detail is on the @Html.ActionLink("About", "About", "LowMem") page.

		<div class="row-divider"> </div>

		Please stay tuned as this website will evolve into something that is more helpful with your picks in the future as time permits.
	</div>
</div>

@if (Model.IsTracking)
{
	<div class="row-divider"> </div>

	<div class="row">

		<div class="col-sm-3">
			<input class="btn btn-info"
				   onclick="clickTracking()"
				   type="button"
				   value="Track your picks with the estimates..."
				   data-toggle="tooltip"
				   data-placement="bottom"
				   title="Click to track all the miners against the estimates..." />
		</div>
	</div>
}

<div class="row-divider"> </div>

<h5>@Html.ActionLink("<<", "WeekBack", null, htmlAttributes: new { @class = "btn btn-info btn-sm" }) weekend ending @weekendEnding (@Model.Duration.ToString("N0") ms)</h5>

<div class="row">
	<div class="col-sm-8">
		<div class="col-sm-5">
			<textarea class="col-xs-12 form-control" id="pasteAreaId" rows="5" style="background-color: lightcyan; vertical-align: top;"
					  placeholder="Paste your 15 Box Office values here (use CR/LF to separate values)"></textarea>
		</div>
		<div class="col-sm-7 hidden-xs hidden-sm">
			<div>Paste your Box Office values into the field to load your custom picks and then press "Import Box Office"</div>
		</div>
		<div class="col-sm-5">
			<input class="btn btn-info" onclick="clickPasteBoxOffice()" type="button" value="Import Box Office" data-toggle="tooltip" data-placement="bottom" title="Click to set Box Office predictions." />
		</div>
	</div>
</div>

<div class="row-divider"> </div>

@* Showing the data from ALL of the sources/miners ====================================================================================== CARD VIEW ==== *@

<div id="cardViewAccordionRoot">
	<div>
		<a data-toggle="collapse" data-parent="#cardViewAccordionRoot" href="#cardViewAccordionPanel" class="btn btn-info btn-lg">
			Mobile View &nbsp;&nbsp;<span class="glyphicon glyphicon-th-list" aria-hidden="true"></span> <span class="glyphicon glyphicon-triangle-bottom" aria-hidden="true"></span>
		</a>

		<div id="cardViewAccordionPanel" class="panel-collapse @string.Format("{0}", Model.ViewMobileOpen ? "visible" : "collapse")">
			<!--  style="margin-left: -30px;" -->
			<div class="panel-body" style="margin-left: -20px;">

				@*BEGIN Accordion body*@

				<div class="row">

					@foreach (var movie in Model.Miners.First().Movies)
					{
						int minerCount = 0;

						<!-- Have 2 major columns when in large format, otherwise the movies are stacked. -->

						<div class="clearfix col-lg-6">
							<!-- The image will always be on the left
							 height="150"
							-->

							<div class="col-xs-4 col-md-2">
								<img class="img-responsive" style="padding: 5px;" src="@movie.ImageUrl" />
							</div>

							<!-- The text will take up the space to the right  -->

							<div class="col-xs-8 col-sm-3">
								<div style="font-weight: bold;">@movie.Cost BUX</div>
								<div style="font-weight: bold;">@movie.Name</div>

								@if (1 <= movieCount && movieCount <= 15)
								{
									var id = string.Format("bomId{0}", movieCount);
									var name = string.Format("BoxOfficeM{0}", movieCount);
									// TODO: May want to use a utility to speed up the reflection.
									var value = string.Format("{0:N0}", Model.GetType().GetProperty("BoxOffice" + movieCount)?.GetValue(Model));

									<!--The majority of this input was taken from Html.TextBoxFor -->

									<input name="@name"
										   class="form-control"
										   id="@id"
										   style="background-color: lightcyan; width: 100px;"
										   type="text"
										   value="@value"
										   data-val-required="The Box Office @movieCount field is required."
										   data-val-number="The field Box Office @movieCount must be a number."
										   data-val="true">
								}

							</div>

							<div class="clearfix col-xs-12 col-sm-6 col-md-7">

								@foreach (var miner in Model.Miners.Skip(2))
								{
									var minerMovie = miner.Movies.FirstOrDefault(item => item.Name == movie.Name);
									var lastWeek = Model.Miners.Last().Movies?.FirstOrDefault(item => item.Name == movie.Name);
									var errorStyle = !string.IsNullOrEmpty(miner.Error) ? @" color: #cc3333;" : string.Empty;
									var colorBackgroundStyle = minerCount % 2 == 0 ? "background-color:hsl(0, 0%, 90%);" : string.Empty;

									decimal percent = 0;

									if (lastWeek != null && minerMovie != null && lastWeek.EarningsBase > 0)
									{
										percent = (minerMovie.EarningsBase - lastWeek.EarningsBase) / lastWeek.EarningsBase * 100;
									}
									<div class="col-xs-5" style="@colorBackgroundStyle">
										@miner.Abbreviation
									</div>
									<div class="col-xs-4" style="text-align: right;@errorStyle @colorBackgroundStyle">
										&nbsp;@string.Format("{0}", string.IsNullOrEmpty(miner.Error) ? minerMovie?.EarningsBase.ToString("N0") : miner.Error)
									</div>
									<div class="col-xs-3" style="text-align: right; @colorBackgroundStyle">
										&nbsp;@string.Format("{0}", percent != 0 ? " " + percent.ToString("N0") + "%" : string.Empty)
									</div>

									minerCount++;
								}
							</div>
						</div>

						movieCount++;
					}
				</div>

				<div class="row">

					<div class="clearfix col-xs-12 col-sm-6 col-md-7">

						@for (int minerCount = 1; minerCount <= 7; minerCount++)
						{
							var miner = Model.Miners.ToList()[minerCount];
							var id = string.Format("weightmId{0}", minerCount);
							var name = string.Format("WeightM{0}", minerCount);

							// TODO: May want to use a utility to speed up the reflection.

							var value = string.Format("{0:N0}", Model.GetType().GetProperty("Weight" + minerCount)?.GetValue(Model));

							<div class="col-xs-5">
								@if (miner == Model.Miners.Last() || !miner.Movies.Any())
								{
									<a class="btn btn-info"
									   href="@miner.UrlSource"
									   target="_blank"
									   data-toggle="tooltip"
									   data-placement="bottom"
									   title="Click for '@miner.Name' source page... (last updated @string.Format("{0}", ((ICache)miner).LastLoaded.ToString()))">@miner.Name</a>
								}
								else
								{
									<a class="btn btn-success"
									   href="~/Home/Picks?@string.Format("{0}", Model.WeightListForMiner(miner))"
									   data-toggle="tooltip"
									   data-placement="bottom"
									   title="Click for '@miner.Name' dedicated picks...">@miner.Name</a>
								}
							</div>
							<div class="col-xs-4" style="text-align: right;">

								@*The majority of this input was taken from Html.TextBoxFor*@

								<input name="@name"
									   class="form-control"
									   id="@id"
									   style="background-color: #dfffdf; width: 50px;"
									   type="text"
									   value="@value"
									   data-val-required="The Weight @minerCount field is required."
									   data-val-number="The field Weight @minerCount must be a number."
									   data-val="true">
							</div>
						}
					</div>

					<div class="col-xs-3">
						<input class="btn btn-info"
							   onclick="clickRecalc('card')"
							   type="button"
							   value="Apply Weights"
							   data-toggle="tooltip"
							   data-placement="bottom"
							   title="Click to apply weights and recalculate Custom column..." />

						<input class="btn btn-info"
							   onclick="clickClearWeights(2)"
							   type="button"
							   value="Clear"
							   data-toggle="tooltip"
							   data-placement="bottom"
							   title="Click to clear the miners' weights." />
					</div>
				</div>

				@*END of Accordion panel *@

			</div>
		</div>
	</div>
</div>

<div class="row-divider"> </div>

@* Showing the data from ALL of the sources/miners ====================================================================================== GRID VIEW ==== *@

@{
	movieCount = 1;
	first = true;

	<div id="gridViewAccordionRoot">
		<div>
			<a data-toggle="collapse" data-parent="#gridViewAccordionRoot" href="#gridViewAccordionPanel" class="btn btn-info btn-lg">
				Grid View &nbsp;&nbsp;<span class="glyphicon glyphicon-list-alt" aria-hidden="true"></span> <span class="glyphicon glyphicon-triangle-bottom" aria-hidden="true"></span>
			</a>

			<div id="gridViewAccordionPanel" class="panel-collapse  @string.Format("{0}", Model.ViewGridOpen ? "visible" : "collapse")">
				<div class="panel-body">

					@*BEGIN Accordion body*@

					<table class="table table-responsive" style="width: 100%">
						<thead>
							<tr>

								@*========== The Header Buttons for the source data ==========*@

								<th style="text-align: center;">
									<a class="btn btn-info btn-xs" href="@string.Format("{0}", Model.Miners.FirstOrDefault()?.UrlSource)" data-toggle="tooltip" data-placement="bottom" title="Click for FML BUX source page...">BUX</a>
								</th>

								<th style="text-align: center;">
									<input class="btn btn-info btn-xs"
										   onclick="clickRecalc('grid')"
										   type="button"
										   value="Custom"
										   data-toggle="tooltip"
										   data-placement="bottom"
										   title="Click to apply weights and recalculate Custom column..." />
								</th>

								@foreach (var miner in Model.Miners.Where(item => !item.IsHidden).Skip(1))
								{
									var errorDetail = string.IsNullOrEmpty(miner.ErrorDetail) ? string.Empty : string.Format("[Error - {0}]", miner.ErrorDetail);
									var lastUpdated = ((ICache)miner).LastLoaded.HasValue ? string.Format("(last updated {0})", ((ICache)miner).LastLoaded) : string.Empty;
									var toolTip = string.Format("Click for '{0}' source page... {1}{2}"
																, miner.Name, lastUpdated, errorDetail);

									@*<th></th>*@
									<th style="text-align: center;">
										<a class="btn btn-info btn-xs" href="@miner.UrlSource" target="_blank" data-toggle="tooltip" data-placement="bottom"
										   title="@toolTip">
											@miner.Abbreviation
										</a>
									</th>
								}
							</tr>
							<tr>

								@*========== The Error Row ==========*@

								<td></td>
								<td></td>
								@*<td></td>*@

								@foreach (var miner in Model.Miners.Where(item => !item.IsHidden).Skip(1))
								{

									if (!string.IsNullOrEmpty(miner.Error))
									{
										<td style="text-align: center; color: #cc3333">@miner.Error</td>
									}
									else
									{
										<td></td>
									}
									@*<td></td>*@
								}
							</tr>
						</thead>

						<tbody>

							@* Are there any compound movies?  Movie(s) that are split up into multiple days. *@

							@{
								var compoundMovie = Model.Miners.FirstOrDefault(miner => miner.CompoundMovie != null)?.CompoundMovie;

								if (compoundMovie != null)
								{
									var compoundMovieImageUrl = compoundMovie.ImageUrl.Replace($"-{compoundMovie.Day.Value.ToString()}", string.Empty);

									<tr>
										<td>
											<img height="100" src="@compoundMovieImageUrl" />
										</td>
										<td>@compoundMovie.MovieName TOTAL</td>
										<td> </td>

										@foreach (var miner in Model.Miners.Skip(2))
										{
											var compoundTotal = miner.CompoundTotal;

											<td>@string.Format("{0}", compoundTotal > 0 ? compoundTotal.ToString("N0") : string.Empty)</td>
											<td></td>
										}
									</tr>
								}
							}

							@foreach (var movie in Model.Miners.First().Movies)
							{
								//const string myColumnStyle = "width: 100px;";
								//const string myColumnFormat = "{0:N0}";
								var lastWeek = Model.Miners.Last().Movies?.FirstOrDefault(item => item.Name == movie.Name);
								var movieIsNewStyle = lastWeek == null ? "background-color: #C3FDB8;" : string.Empty;           // Color light-jade
								bool isFirst = true;

								<tr style="@movieIsNewStyle">

									@* Movie Image *@

									<td>
										@if (movie.Day.HasValue)
										{
											<img height="100" style="position: relative; bottom: -15px; float: left;" src="@movie.ImageUrl" />
											@*<img height="30" style="position: relative; top: -85px; float: left;" src="@string.Format("/Images/{0}-mask.png", movie.Day.Value)" />*@
										}
										else
										{
											<img height="100" src="@movie.ImageUrl" />
										}
									</td>

									@* Movie Details and edit field *@

									<td>
										<div>
											@movie.Name
										</div>

										@{
											// TODO: May want to use a utility to speed up the reflection.
											var value = (decimal)Model.GetType().GetProperty("BoxOffice" + movieCount)?.GetValue(Model);
											var valueString = string.Format("{0:N0}", value);
											decimal customPercent = 0;

											if (lastWeek != null && movie != null && lastWeek.EarningsBase > 0 && value != 0)
											{
												customPercent = (value - lastWeek.EarningsBase) / lastWeek.EarningsBase * 100;
											}

											<div>
												@string.Format("{0}", customPercent != 0 ? " " + customPercent.ToString("N0") + "% " : string.Empty)
											</div>
										}

										@{
											var id = string.Format("boId{0}", movieCount);
											var name = string.Format("BoxOffice{0}", movieCount);

											@*The majority of this input was taken from Html.TextBoxFor*@

											<input name="@name"
												   class="form-control"
												   id="@id"
												   style="background-color: lightcyan; width: 100px;"
												   type="text"
												   value="@valueString"
												   data-val-required="The Box Office @movieCount field is required."
												   data-val-number="The field Box Office @movieCount must be a number."
												   data-val="true">
										}

										<div style="font-weight: bold;">
											@movie.Cost
										</div>
									</td>

									@foreach (var miner in Model.Miners.Where(item => !item.IsHidden))
									{
										var minerMovie = miner.Movies?.FirstOrDefault(item => item.Name == movie.Name);

										if (isFirst)
										{
											isFirst = false;
										}
										else
										{
											<td style="text-align: right">
												@*@string.Format("{0}", minerMovie?.Earnings.ToString("N0") ?? "not found")*@
												<div>
													@string.Format("{0}", minerMovie?.Earnings.ToString("N0"))
												</div>

												@{
													if (miner != Model.Miners.Last())
													{
														decimal percent = 0;

														if (lastWeek != null && minerMovie != null && lastWeek.EarningsBase > 0)
														{
															percent = (minerMovie.EarningsBase - lastWeek.EarningsBase) / lastWeek.EarningsBase * 100;
														}

														//var bootstrapClass = percent <= -20 ? (percent <= -40 ? "table-danger" : "table-warning")
														//									: (percent > 0 ? "table-success" : "table-info");
														var divColorStyle = ViewUtility.PercentColorFromLastWeek(percent);

														<div style="@divColorStyle">
															@string.Format("{0}", percent != 0 ? " " + percent.ToString("N0") + "% " : string.Empty)
														</div>
													}
												}
											</td>
										}
									}
								</tr>

								movieCount++;
							}

							<tr>
								<td></td>
								<td></td>

								@foreach (var miner in Model.Miners.Where(item => !item.IsHidden).Skip(1))
								{
									<td style="text-align: center">
										@if (miner == Model.Miners.Last() || !miner.Movies.Any())
										{
											<a class="btn btn-info btn-xs"
											   href="@miner.UrlSource"
											   target="_blank"
											   data-toggle="tooltip"
											   data-placement="bottom"
											   title="Click for '@miner.Name' source page... (last updated @string.Format("{0}", ((ICache)miner).LastLoaded.ToString()))">@miner.Abbreviation</a>
										}
										else
										{
											<a class="btn btn-success btn-xs"
											   href="~/Home/Picks?@string.Format("{0}", Model.WeightListForMiner(miner))"
											   data-toggle="tooltip"
											   data-placement="bottom"
											   title="Click for '@miner.Name' dedicated picks...">@miner.Abbreviation</a>
										}
									</td>
								}
							</tr>

							<tr>
								@*
									<td>@Html.ActionLink("Extract", "ExtractToCSV", null, htmlAttributes: new { @class = "btn btn-info btn-sm", data_toggle = "tooltip", data_placement = "bottom", title = "Click to extract as CSV text file..." })</td>
								*@

								<td>
									<input class="btn btn-info" onclick="clickRecalc()" type="button" value="Apply" data-toggle="tooltip" data-placement="bottom" title="Click to apply weights and recalculate Mine/Custom column..." />
								</td>

								@for (int minerCount = 1; minerCount <= 7; minerCount++)
								{
									var id = string.Format("weightId{0}", minerCount);
									var name = string.Format("Weight{0}", minerCount);

									// TODO: May want to use a utility to speed up the reflection.

									var value = string.Format("{0:N0}", Model.GetType().GetProperty("Weight" + minerCount)?.GetValue(Model));

									@*if (minerCount > 2)
										{
											<td></td>
										}*@

									<td>
										@*The majority of this input was taken from Html.TextBoxFor*@

										<input name="@name"
											   class="form-control"
											   id="@id"
											   style="background-color: #dfffdf; width: 50px;"
											   type="text"
											   value="@value"
											   data-val-required="The Weight @minerCount field is required."
											   data-val-number="The field Weight @minerCount must be a number."
											   data-val="true">
									</td>
								}
								@*<td></td>*@

								<td>
									<input class="btn btn-info"
										   onclick="clickClearWeights(2)"
										   type="button"
										   value="Clear"
										   data-toggle="tooltip"
										   data-placement="bottom"
										   title="Click to clear the miners' weights." />
								</td>

							</tr>
						</tbody>
					</table>

					@*END of Accordion panel *@

				</div>
			</div>
		</div>
	</div>

	<div class="row-divider"> </div>

	<input class="btn btn-success btn-lg"
		   onclick="clickPicks()"
		   type="button"
		   value="Calculate Picks..."
		   data-toggle="tooltip"
		   data-placement="bottom"
		   title="Click to apply weights and recalculate Custom column...">
}