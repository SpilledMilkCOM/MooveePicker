@model  MoviePicker.WebApp.Models.IndexViewModel

@using MovieMiner;
@using MoviePicker.Common.Interfaces;

@{
	ViewBag.Title = "Home";
	const string myColumnFormat = "{0:F0}";
}

<script type="text/javascript">

	function clickClearWeights(idxStart) {
		if (idxStart == 2) {
			$("#weightId1").val(1)
		}

		for (idx = idxStart; idx <= 7; idx++) {
			$("#weightId" + idx).val(0)
		}
	}

	function clickPasteBoxOffice() {
		var boValues = $("#pasteAreaId").val()
		var splitValues = boValues.split("\n");

		for (idx = 0; idx < 15; idx++) {

			//console.log(idx + " = " + splitValues[idx]);

			if (idx < splitValues.length) {
				$("#boId" + (idx + 1)).val(splitValues[idx].trim())
			}
			else {
				$("#boId" + (idx + 1)).val("")
			}
		}

		// Blank out the field so you know you clicked on something.

		$("#pasteAreaId").val("")
	}

	function clickPicks() {

		var parameters = parseBoxOfficeWeights()

		var url = "/home/picks?" + parameters

		var baseUrl = parseBaseUrl()

		window.location.href = baseUrl + url
	}

	function clickTracking() {

		var parameters = parseBoxOfficeWeights()

		var url = "/home/tracking?" + parameters

		var baseUrl = parseBaseUrl()

		window.location.href = baseUrl + url
	}

	function clickRecalc() {

		var parameters = parseBoxOfficeWeights()

		var url = "/home/index?" + parameters

		var baseUrl = parseBaseUrl()

		window.location.href = baseUrl + url
	}

	function parseBaseUrl() {
		var baseUrl = window.location.href

		if (baseUrl != null) {
			var slashIdx = baseUrl.indexOf("/", "https://".length)

			if (slashIdx > 0) {
				baseUrl = baseUrl.substring(0, slashIdx)
			}
		}

		return baseUrl
	}

	function parseBoxOfficeWeights() {

		var boList = ""
		var weightList = ""

		for (idx = 1; idx <= 15; idx++) {
			if (idx != 1) {
				boList += ","
			}

			// Replace all commas (global g parameter on regular expression)
			boList += $("#boId" + idx).val().replace(/\,/g, "").replace("$", "")
		}

		for (idx = 1; idx <= 7; idx++) {
			if (idx != 1) {
				weightList += ","
			}

			// TODO: Request encode this.

			weightList += $("#weightId" + idx).val().replace(",", "").replace("$", "")
		}

		return "bo=" + boList + "&wl=" + weightList
	}
</script>

<div class="row">
	<div class="col-sm-2 hidden-xs hidden-sm">
		<img class="img-responsive" src="~/Images/MooveePickerCow512x512.png" width="200" />
	</div>

	<div class="col-sm-5">
		<h2>WELCOME</h2>

		This website is used to aggregate box office movie data for use in the <a href="https://fantasymovieleague.com/" target="_blank">Fantasy Movie League</a>  game.
		This will help <strong>YOU</strong> gather the data so you can make better projections for your weekly picks.
		You may use the weights to determine how well you "trust" each source to generate your own numbers and then "Pick" your line-up which will be displayed on another page.
	</div>

	<div class="col-sm-5">
		<h2>Fantasy Movie League Family</h2>

		Not sure how you found the site.  Could have been from a post or a tweet.
		Make sure you follow me on Twitter, that can be found on the @Html.ActionLink("Contact", "Contact") page.
		Other information is on the @Html.ActionLink("About", "About") page.

		<div class="row-divider"> </div>

		Please stay tuned as this website will evolve into something that is more helpful with your picks in the future as time permits.
	</div>
</div>


@if (Model.IsTracking)
{
	<div class="row-divider"> </div>

	<div class="row">

		<div class="col-sm-3">
			<input class="btn btn-info"
				   onclick="clickTracking()"
				   type="button"
				   value="Track your picks with the estimates..."
				   data-toggle="tooltip"
				   data-placement="bottom"
				   title="Click to track all the miners against the estimates..." />
		</div>
	</div>
}

@{
	var weekendEnding = Model.Miners.First().Movies?.First().WeekendEnding.ToShortDateString();
	int movieCount = 1;     // This scope is pretty far, sorry  :(
	bool first = true;
}

<h3>Box Office Forecasts</h3>
<h5>@Html.ActionLink("<<", "WeekBack", null, htmlAttributes: new { @class = "btn btn-info btn-sm" }) weekend ending @weekendEnding (@Model.Duration.ToString("N0") ms)</h5>

<div class="row">
	<div class="col-sm-6">
		The following table is an aggregation of data for the "play" week ending @weekendEnding for the Fantasy Movie League website.
		Currently the site aggregates box office data from Todd Thatcher's post on FML, Box Office Pro, Box Office Mojo, Box Office Report, Culture Vulture, and Box Office Prophet.
		These are the "experts" in the field.  YOUR job is to determine who you trust and by how much and apply a weighting mechanism before you make your game picks.
	</div>

	<div class="col-sm-1"></div>

	<div class="col-sm-5">
		<div class="col-sm-5">
			<textarea class="col-xs-12 form-control" id="pasteAreaId" rows="5" style="background-color: lightcyan; vertical-align: top;"
					  placeholder="Paste your 15 Box Office values here (use CR/LF to separate values)"></textarea>
		</div>
		<div class="col-sm-7">
			<div>Paste your Box Office values into the field to load your custom picks and then press "Import Box Office"</div>
			<p></p>
			<input class="btn btn-info" onclick="clickPasteBoxOffice()" type="button" value="Import Box Office" data-toggle="tooltip" data-placement="bottom" title="Click to set Box Office predictions." />
		</div>
	</div>
</div>

<div class="row-divider"> </div>

@foreach (var movie in Model.Miners.First().Movies)
{
	<div class="row">

		@* The image will always be on the left *@

		<div class="col-xs-4 col-md-3 col-lg-2">
			<img class="img-responsive" height="100" src="@movie.ImageUrl" />
		</div>

		@* The text will take up the space to the right *@

		<div class="col-xs-8 col-md-9 col-lg-10">

			<div class="col-lg-2">
				<div style="font-weight: bold;">@movie.Cost</div>
				<div style="font-weight: bold;">@movie.Name</div>

				@if (1 <= movieCount && movieCount <= 15)
				{
					var id = string.Format("boId{0}", movieCount);
					var name = string.Format("BoxOffice{0}", movieCount);
					// TODO: May want to use a utility to speed up the reflection.
					var value = string.Format("{0:N0}", Model.GetType().GetProperty("BoxOffice" + movieCount)?.GetValue(Model));

					@*The majority of this input was taken from Html.TextBoxFor*@

					<input name="@name"
						   class="form-control"
						   id="@id"
						   style="background-color: lightcyan; width: 100px;"
						   type="text"
						   value="@value"
						   data-val-required="The Box Office @movieCount field is required."
						   data-val-number="The field Box Office @movieCount must be a number."
						   data-val="true">
				}
			</div>

			<div class="clearfix"> </div>

			@for (int column = 0; column < 2; column++)
			{
				<div class="col-lg-8">

					@foreach (var miner in Model.Miners.Skip(2 + 4 * column).Take(4))
					{
						var minerMovie = miner.Movies.FirstOrDefault(item => item.Name == movie.Name);
						var lastWeek = Model.Miners.Last().Movies?.FirstOrDefault(item => item.Name == movie.Name);

						decimal percent = 0;

						if (lastWeek != null && minerMovie != null && lastWeek.EarningsBase > 0)
						{
							percent = (minerMovie.EarningsBase - lastWeek.EarningsBase) / lastWeek.EarningsBase * 100;
						}

						<div class="col-xs-3">
							@miner.Abbreviation
						</div>
						<div class="col-xs-7" style="text-align: right;">
							@string.Format("{0:N0}", minerMovie?.EarningsBase)&nbsp;
						</div>
						<div class="col-xs-2" style="text-align: right; width: 50px;">
							@string.Format("{0}", percent != 0 ? " " + percent.ToString("N0") + "%" : string.Empty)&nbsp;
						</div>
					}
				</div>
			}
		</div>
	</div>

	movieCount++;
}

<div class="row-divider"> </div>

@* Showing the data from ALL of the sources/miners *@

@{
	movieCount = 1;
	first = true;

	<table class="table" style="width: 100%">
		<thead>
			<tr>
				<th style="text-align: center;">
					<a class="btn btn-info btn-xs" href="@string.Format("{0}", Model.Miners.FirstOrDefault()?.UrlSource)" data-toggle="tooltip" data-placement="bottom" title="Click for FML BUX source page...">BUX</a>
				</th>

				<th style="text-align: center;"> </th>

				<th style="text-align: center;">Movie</th>

				@foreach (var miner in Model.Miners.Where(item => !item.IsHidden))
				{
					<th style="text-align: center;">
						@if (first)
						{
							first = false;

							<input class="btn btn-info btn-xs" onclick="clickRecalc()" type="button" value="Custom" data-toggle="tooltip" data-placement="bottom" title="Click to apply weights and recalculate Custom column..." />
						}
						else
						{
							<a class="btn btn-info btn-xs" href="@miner.UrlSource" target="_blank" data-toggle="tooltip" data-placement="bottom"
							   title="Click for '@miner.Name' source page... (last updated @string.Format("{0}", ((ICache)miner).LastLoaded.ToString()))">
								@miner.Abbreviation
							</a>
						}
					</th>
					<th></th>
				}
			</tr>
			<tr>
				<td></td>
				<td></td>
				<td style="text-align: center;"></td>
				<td></td>
				<td></td>

				@foreach (var miner in Model.Miners.Where(item => !item.IsHidden).Skip(1))
				{

					if (!string.IsNullOrEmpty(miner.Error))
					{
						<td style="text-align: center; color: #cc3333">@miner.Error</td>
					}
					else
					{
						<td></td>
					}
					<td></td>
				}
			</tr>
		</thead>

		<tbody>
			@foreach (var movie in Model.Miners.First().Movies)
			{
				//const string myColumnStyle = "width: 100px;";
				//const string myColumnFormat = "{0:N0}";
				bool isFirst = true;

				<tr>
					<td>@movie.Cost</td>
					<td>
						<img height="75" src="@movie.ImageUrl" />
					</td>
					<td style="text-align: center;">@movie.Name</td>

					@foreach (var miner in Model.Miners.Where(item => !item.IsHidden))
					{
						var minerMovie = miner.Movies?.FirstOrDefault(item => item.Name == movie.Name);

						if (isFirst)
						{
							isFirst = false;

							if (1 <= movieCount && movieCount <= 15)
							{
								var id = string.Format("boId{0}", movieCount);
								var name = string.Format("BoxOffice{0}", movieCount);
								// TODO: May want to use a utility to speed up the reflection.
								var value = string.Format("{0:N0}", Model.GetType().GetProperty("BoxOffice" + movieCount)?.GetValue(Model));

								<td>
									@*The majority of this input was taken from Html.TextBoxFor*@

									<input name="@name"
										   class="form-control"
										   id="@id"
										   style="background-color: lightcyan; width: 100px;"
										   type="text"
										   value="@value"
										   data-val-required="The Box Office @movieCount field is required."
										   data-val-number="The field Box Office @movieCount must be a number."
										   data-val="true">
								</td>
							}
						}
						else
						{
							<td style="text-align: right">
								@string.Format("{0:N0}", minerMovie?.Earnings)
							</td>
						}

						if (miner != Model.Miners.Last())
						{
							var lastWeek = Model.Miners.Last().Movies?.FirstOrDefault(item => item.Name == movie.Name);
							decimal percent = 0;

							if (lastWeek != null && minerMovie != null && lastWeek.EarningsBase > 0)
							{
								percent = (minerMovie.EarningsBase - lastWeek.EarningsBase) / lastWeek.EarningsBase * 100;
							}

							var bootstrapClass = percent <= -20 ? (percent <= -40 ? "table-danger" : "table-warning")
													: (percent > 0 ? "table-success" : "table-info");

							<td class="@bootstrapClass" style="text-align: right; width: 50px;">
								@string.Format("{0}", percent != 0 ? " " + percent.ToString("N0") + "% " : string.Empty)
							</td>
						}
						else
						{
							<td></td>
						}
					}
				</tr>

				movieCount++;
			}

			<tr>
				<td></td>
				<td></td>
				<td></td>

				@{
					first = true;
				}

				@foreach (var miner in Model.Miners.Where(item => !item.IsHidden))
				{
					<td style="text-align: center">
						@if (first)
						{
							first = false;
						}
						else if (miner == Model.Miners.Last() || !miner.Movies.Any())
						{
							<a class="btn btn-info btn-xs"
							   href="@miner.UrlSource"
							   target="_blank"
							   data-toggle="tooltip"
							   data-placement="bottom"
							   title="Click for '@miner.Name' source page... (last updated @string.Format("{0}", ((ICache)miner).LastLoaded.ToString()))">@miner.Abbreviation</a>
						}
						else
						{
							<a class="btn btn-success btn-xs"
							   href="~/home/picks?@string.Format("{0}", Model.WeightListForMiner(miner))"
							   data-toggle="tooltip"
							   data-placement="bottom"
							   title="Click for '@miner.Name' dedicated picks...">@miner.Abbreviation</a>
						}
					</td>
					<td></td>
				}
			</tr>

			<tr>
				<td>@Html.ActionLink("Extract", "ExtractToCSV", null, htmlAttributes: new { @class = "btn btn-info btn-sm", data_toggle = "tooltip", data_placement = "bottom", title = "Click to extract as CSV text file..." })</td>

				<td></td>

				<td>
					<input class="btn btn-info" onclick="clickRecalc()" type="button" value="Apply Weights" data-toggle="tooltip" data-placement="bottom" title="Click to apply weights and recalculate Mine column..." />
				</td>

				@for (int minerCount = 1; minerCount <= 7; minerCount++)
				{
					if (1 <= minerCount && minerCount <= 15)
					{
						var id = string.Format("weightId{0}", minerCount);
						var name = string.Format("Weight{0}", minerCount);

						// TODO: May want to use a utility to speed up the reflection.

						var value = string.Format("{0:N0}", Model.GetType().GetProperty("Weight" + minerCount)?.GetValue(Model));

						<td>
							@*The majority of this input was taken from Html.TextBoxFor*@

							<input name="@name"
								   class="form-control"
								   id="@id"
								   style="background-color: #dfffdf; width: 50px;"
								   type="text"
								   value="@value"
								   data-val-required="The Weight @minerCount field is required."
								   data-val-number="The field Weight @minerCount must be a number."
								   data-val="true">
						</td>
						<td></td>
					}
				}

				<td><input class="btn btn-info" onclick="clickClearWeights(2)" type="button" value="Clear" data-toggle="tooltip" data-placement="bottom" title="Click to clear the miners' weights." /></td>
				<td></td>
			</tr>
		</tbody>
	</table>

	<div class="row">
		<div class="col-sm-1"> </div>

		<div class="col-sm-3">
			<input class="btn btn-success"
				   onclick="clickPicks()"
				   type="button"
				   value="Calculate Picks..."
				   data-toggle="tooltip"
				   data-placement="bottom"
				   title="Click to apply weights and recalculate Custom column..." />
		</div>
	</div>
}
