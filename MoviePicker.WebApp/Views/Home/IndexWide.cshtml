@model MoviePicker.WebApp.ViewModels.PicksViewModel

@using MovieMiner;
@using MoviePicker.Common.Interfaces;
@using MoviePicker.WebApp.Models;
@using MoviePicker.WebApp.Utilities;
@using System.Text;

@{
	ViewBag.Title = "Wide";

	// The start of a miner traversal (skip custom)
	int minerCount = 2;     // This scope is pretty far, sorry  :(
}

<script src="~/Scripts/zGlobal.js" type="text/javascript"></script>
<script src="~/Scripts/zIndex.js" type="text/javascript"></script>
<script src="~/Scripts/zIndexCalculate.js" type="text/javascript"></script>

@{
	//var weekendEnding = Model.Miners.First().Movies?.First().WeekendEnding.ToShortDateString();
	var weekendEnding = Model.Miners.First().ContainsEstimates ? MovieDateUtil.GameSunday(isEstimate: Model.Miners.First().ContainsEstimates).ToShortDateString() : Model.Miners.First().Movies?.FirstOrDefault()?.WeekendEnding.ToShortDateString();

	int movieCount = 1;     // This scope is pretty far, sorry  :(

	var compoundMovie = Model.Miners.FirstOrDefault(miner => miner.CompoundMovie != null)?.CompoundMovie;

	<div class="row">

		@* ================================================================================================================================== PICKS COLUMN ==== *@

		<div class="col-md-6">

			<div id="picksColumn">
				@if (Model.MovieListPerfectPick != null)
				{
					@Html.Partial("MovieListMini2", Model.MovieListPerfectPick)
				}

				@if (Model.MovieList != null)
				{
					@Html.Partial("MovieListMini2", Model.MovieList)
				}

				@if (Model.MovieListBonusOff != null)
				{
					@Html.Partial("MovieListMini2", Model.MovieListBonusOff)
				}
			</div>

			<table class="table table-responsive" style="border: none;">
				<tr>
					@foreach (var miner in Model.Miners.Where(item => !item.IsHidden).Skip(1))
					{
						var buttonStyle = miner.Movies.Any() ? "btn-success" : "btn-info";
						var weightId = string.Format("weightId{0}", minerCount);
						var name = string.Format("Weight{0}", minerCount);
						//var badge = miner.Movies.Any() ? string.Format("<span class=\"badge badge-pill badge-light\">{0}</span>", miner.Movies.Count) : string.Empty;

						// TODO: May want to use a utility to speed up the reflection.

						var valueString = string.Format("{0:N0}", Model.GetType().GetProperty("Weight" + minerCount)?.GetValue(Model));

						<td>
							<a class="btn @buttonStyle btn-xs"
							   href="@miner.UrlSource"
							   target="_blank"
							   data-toggle="tooltip"
							   data-placement="bottom"
							   title="Click for '@miner.Name' source page... (last updated @string.Format("{0}", ((ICache)miner).LastLoaded.ToString()))">
								@miner.Abbreviation
							</a>

							<input name="@name"
								   class="form-control"
								   id="@weightId"
								   onblur="weightLostFocus(this.value, @minerCount)"
								   style="background-color: #dfffdf; width: 50px;"
								   type="text"
								   value="@valueString"
								   data-original-value="@valueString"
								   data-val-required="The Weight @minerCount field is required."
								   data-val-number="The field Weight @minerCount must be a number."
								   data-val="true">
						</td>

						minerCount++;
					}
					<td>
						<input class="btn btn-success btn-lg"
							   style="margin-top: 10px;"
							   onclick="navigateTo('/Home/IndexWide')"
							   type="button"
							   value="Calculate Picks"
							   data-toggle="tooltip"
							   data-placement="bottom"
							   title="Click to recalculate page...">
					</td>
				</tr>
			</table>
		</div>

		<div class="col-md-6">

			<ul class="nav nav-tabs">
				<li class="active"><a data-toggle="tab" href="#menu1">Bonus Comparisons</a></li>
				<li><a data-toggle="tab" href="#menu2">Theater Counts</a></li>
			</ul>

			<div class="tab-content">
				<div id="menu1" class="tab-pane fade in active">
					@* ================================================================================================================================== BONUS COMPARISON COLUMN ==== *@

					@* TODO - Put this in a partial view. *@

					<div style="border: solid; border-radius: 4px; border-width: 1px; padding: 8px;">
						<h4>Bonus Comparisons -- Weekend ending @weekendEnding (<span id="durationId">@Model.Duration.ToString("N0")</span> ms)</h4>

						@*<div class="col-sm-1 hidden-xs" style="font-weight: bold;">Rank</div>*@
						<div class="col-sm-4 hidden-xs" style="font-weight: bold;">Name</div>
						<div class="col-sm-1 hidden-xs" style="font-weight: bold;">BUX</div>
						<div class="col-sm-2 hidden-xs" style="font-weight: bold; text-align: right;">Earnings</div>
						<div class="col-sm-1 hidden-xs" style="font-weight: bold; text-align: center;">Efficiency</div>
						<div class="col-sm-4 hidden-xs" style="font-weight: bold; text-align: center;">Difference</div>

						@{
							if (Model.Movies.Count() > 0)
							{
								var mostEfficient = Model.Movies.OrderByDescending(item => item.Efficiency).FirstOrDefault();

								movieCount = 0;

								foreach (var movie in Model.Movies.OrderByDescending(item => item.Efficiency))
								{
									var backgroundColor = movieCount == 0 ? "background-color: lightgreen;" : (movieCount % 2 == 0 ? "background-color: lightgrey;" : string.Empty);
									var rank = Model.Rank(movie);

									@*<div class="col-sm-1 hidden-xs" style="@backgroundColor text-align: right;">@rank</div>*@
									<div id="@string.Format("bonusCompMovieName{0}", movieCount)"
										 class="col-xs-12 col-sm-4"
										 style="@backgroundColor font-weight: bold;">@movie.Name</div>
										<div class="col-xs-3 hidden-sm hidden-md hidden-lg"
											 style="@backgroundColor font-weight: bold;">BUX:</div>
										<div id="@string.Format("bonusCompMovieCost{0}", movieCount)"
											 class="col-xs-3 col-sm-1"
											 style="@backgroundColor text-align: right;">@movie.Cost</div>

											<div class="col-xs-3 hidden-sm hidden-md hidden-lg"
												 style="@backgroundColor font-weight: bold;">Earnings:</div>
											<div id="@string.Format("bonusCompMovieEarnings{0}", movieCount)"
												 class="col-xs-3 col-sm-2"
												 style="@backgroundColor text-align: right;">@string.Format("{0:N0}", movie.Earnings)</div>

												<div class="col-xs-3 hidden-sm hidden-md hidden-lg"
													 style="@backgroundColor font-weight: bold;">Efficiency:</div>
												<div id="@string.Format("bonusCompMovieEfficiency{0}", movieCount)"
													 class="col-xs-3 col-sm-1"
													 style="@backgroundColor text-align: right;">@string.Format("{0:N2}", movie.Efficiency / 1000m)</div>

													<div class="col-xs-6 hidden-sm hidden-md hidden-lg" style="@backgroundColor">--</div>

													<div class="col-xs-3 hidden-sm hidden-md hidden-lg" style="@backgroundColor font-weight: bold;">Difference:</div>

													if (movie.EarningsBase > 0)
													{
														var nextRankedMovie = Model.Movies.FirstOrDefault(item => Model.Rank(item) == rank + 1);

														// Compute difference columns.

														if (rank == 1)
														{
															if (nextRankedMovie != null)
															{
																//How much does the top rank have to LOSE before it's no longer the TOP

																<div id="@string.Format("bonusCompDifference{0}", movieCount)"
																	 class="col-xs-3 col-sm-2"
																	 style="@backgroundColor text-align: right;">
																	@string.Format("{0:N0}", nextRankedMovie.Efficiency * movie.Cost - movie.EarningsBase)
																</div>
																<div id="@string.Format("bonusCompDiffPctUp{0}", movieCount)"
																	 class="col-xs-2 col-sm-1"
																	 style="@backgroundColor text-align: right;">--</div>
																<div id="@string.Format("bonusCompDiffPctDown{0}", movieCount)"
																	 class="col-xs-2 col-sm-1"
																	 style="@backgroundColor text-align: right; color: #cc3333;">
																	@string.Format("{0:N1}%", (nextRankedMovie.Efficiency * movie.Cost - movie.EarningsBase) / movie.EarningsBase * 100)
																</div>
															}
														}
														else
														{
															//How much does current rank to GAIN to be the TOP

															<div id="@string.Format("bonusCompDifference{0}", movieCount)"
																 class="col-xs-3 col-sm-2"
																 style="@backgroundColor text-align: right;">
																@string.Format("{0:N0}", mostEfficient.Efficiency * movie.Cost - movie.EarningsBase)
															</div>
															<div id="@string.Format("bonusCompDiffPctUp{0}", movieCount)"
																 class="col-xs-2 col-sm-1"
																 style="@backgroundColor text-align: right; color: #33cc33">
																@string.Format("{0:N1}%", (mostEfficient.Efficiency * movie.Cost - movie.EarningsBase) / movie.EarningsBase * 100)
															</div>

															//How much does the current rank have to LOSE before it's no longer that rank

															if (nextRankedMovie != null)
															{
																<div id="@string.Format("bonusCompDiffPctDown{0}", movieCount)"
																	 class="col-xs-2 col-sm-1"
																	 style="@backgroundColor text-align: right; color: #cc3333">
																	@string.Format("{0:N1}%", (nextRankedMovie.Efficiency * movie.Cost - movie.EarningsBase) / movie.EarningsBase * 100)
																</div>
															}
															else
															{
																<div id="@string.Format("bonusCompDiffPctDown{0}", movieCount)"
																	 class="col-xs-2 col-sm-1"
																	 style="@backgroundColor text-align: right;">--</div>
															}
														}
													}
													else
													{
														// Build the scaffolding anyway

														<div id="@string.Format("bonusCompDifference{0}", movieCount)"
															 class="col-xs-3 col-sm-2"
															 style="@backgroundColor text-align: right;">--</div>

														<div id="@string.Format("bonusCompDiffPctUp{0}", movieCount)"
															 class="col-xs-2 col-sm-1"
															 style="@backgroundColor text-align: right; color: #33cc33">--</div>

														<div id="@string.Format("bonusCompDiffPctDown{0}", movieCount)"
															 class="col-xs-2 col-sm-1"
															 style="@backgroundColor text-align: right; color: #cc3333">--</div>
													}

													movieCount++;

													<div class="clearfix"></div>
												}
											}
						}

					</div>
				</div>

				<div id="menu2" class="tab-pane fade in">
					@* ================================================================================================================================== THEATER COUNT COMPARISON COLUMN ==== *@

					@* TODO - Put this in a partial view. *@

					<div style="border: solid; border-radius: 4px; border-width: 1px; padding: 8px;">
						<h4>
							Theater Counts
							<div class="btn btn-info btn-xs" style="font-size: large;" data-toggle="tooltip" data-placement="bottom"
								 title="The table below contains theater counts and efficiencies ($$ / theater) as well as last week (where applicable).">
								<span class="glyphicon glyphicon-info-sign" aria-hidden="true"></span>
							</div>
						</h4>

						@*<div class="col-sm-1 hidden-xs" style="font-weight: bold;">Rank</div>*@
						<div class="col-sm-4 hidden-xs" style="font-weight: bold;">Name</div>
						<div class="col-sm-1 hidden-xs" style="font-weight: bold; text-align: right;">
							<a class="btn btn-info btn-xs"
							   href="@Model.Miners.ToList()[MinerModel.MOJO_THEATER_INDEX].UrlSource">Count</a>
						</div>
						<div class="col-sm-2 hidden-xs" style="font-weight: bold; text-align: right;">Earnings</div>
						<div class="col-sm-1 hidden-xs" style="font-weight: bold; text-align: right;">$ / Thtr</div>
						<div class="col-sm-1 hidden-xs" style="font-weight: bold; text-align: right;">
							<a class="btn btn-info btn-xs"
							   href="@Model.Miners.ToList()[MinerModel.MOJO_LAST_INDEX].UrlSource">Last Count</a>
						</div>
						<div class="col-sm-2 hidden-xs" style="font-weight: bold; text-align: right;">$ / Thtr</div>
						<div class="col-sm-1 hidden-xs" style="font-weight: bold; text-align: right;">Diff</div>

						<div class="clearfix"></div>

						@{
							if (Model.Movies.Count() > 0)
							{
								var mostEfficient = Model.Movies.OrderByDescending(item => item.Efficiency).FirstOrDefault();

								movieCount = 0;

								foreach (var movie in Model.Movies.OrderByDescending(item => item.TheaterEfficiency))
								{
									var backgroundColor = movieCount % 2 == 0 ? "background-color: lightgrey;" : string.Empty;
									var lastWeek = Model.Miners.Last().Movies?.FirstOrDefault(item => item.Name == movie.Name);

									// You HAVE to use movieCount as the control id since this table is ORDER based (the movies CAN change order) versus cost based like the box office table.

									<div id="@string.Format("theaterCountName{0}", movieCount)"
										 class="col-xs-12 col-sm-4"
										 style="@backgroundColor font-weight: bold;">
										@movie.Name
									</div>

									<div class="col-xs-3 hidden-sm hidden-md hidden-lg"
										 style="@backgroundColor font-weight: bold;">
										Count:
									</div>
									<div id="@string.Format("theaterCount{0}", movieCount)"
										 class="col-xs-3 col-sm-1"
										 style="@backgroundColor text-align: right;">
										@string.Format("{0:N0}", movie.TheaterCount)
									</div>

									<div class="col-xs-3 hidden-sm hidden-md hidden-lg"
										 style="@backgroundColor font-weight: bold;">Earnings:</div>
									<div id="@string.Format("theaterCountEarnings{0}", movieCount)"
										 class="col-xs-3 col-sm-2"
										 style="@backgroundColor text-align: right;">
										@string.Format("{0:N0}", movie.Earnings)
									</div>

									<div class="col-xs-3 hidden-sm hidden-md hidden-lg"
										 style="@backgroundColor font-weight: bold;">Efficiency:</div>
									<div id="@string.Format("theaterCountEfficiency{0}", movieCount)"
										 class="col-xs-3 col-sm-1"
										 style="@backgroundColor text-align: right;">
										@string.Format("{0:N0}", movie.TheaterEfficiency)
									</div>

									if (lastWeek != null)
									{
										var textColor = "color: black;";

										if (movie.TheaterCount - lastWeek.TheaterCount > 0)
										{
											textColor = "color: #33cc33;";
										}
										else if (movie.TheaterCount - lastWeek.TheaterCount < 0)
										{
											textColor = "color: #cc3333;";
										}

										<div class="col-xs-3 hidden-sm hidden-md hidden-lg"
											 style="@backgroundColor font-weight: bold;">
											Last Count:
										</div>
										<div id="@string.Format("theaterCountLast{0}", movieCount)"
											 class="col-xs-3 col-sm-1"
											 style="@backgroundColor text-align: right;">
											@string.Format("{0:N0}", lastWeek.TheaterCount)
										</div>

										<div class="col-xs-3 hidden-sm hidden-md hidden-lg"
											 style="@backgroundColor font-weight: bold;">Last Wk Eff:</div>
										<div id="@string.Format("theaterCountLastEfficiency{0}", movieCount)"
											 class="col-xs-3 col-sm-2"
											 style="@backgroundColor text-align: right;">
											@string.Format("{0:N0}", lastWeek.TheaterEfficiency)
										</div>

										<div class="col-xs-3 hidden-sm hidden-md hidden-lg"
											 style="@backgroundColor font-weight: bold;">Difference:</div>
										<div id="@string.Format("theaterCountDifference{0}", movieCount)"
											 class="col-xs-3 col-sm-1"
											 style="@backgroundColor @textColor text-align: right;">
											@string.Format("{0:N0}", movie.TheaterCount - lastWeek.TheaterCount)
										</div>
									}
									else
									{
										// Build scaffolding for dynamic changes.

										<div class="col-xs-3 hidden-sm hidden-md hidden-lg"
											 style="@backgroundColor font-weight: bold;">Last Count:</div>
										<div id="@string.Format("theaterCountLast{0}", movieCount)"
											 class="col-xs-3 col-sm-1"
											 style="@backgroundColor text-align: right;">--</div>

										<div class="col-xs-3 hidden-sm hidden-md hidden-lg"
											 style="@backgroundColor font-weight: bold;">Last Wk Count:</div>
										<div id="@string.Format("theaterCountLastEfficiency{0}", movieCount)"
											 class="col-xs-3 col-sm-2"
											 style="@backgroundColor text-align: right;">--</div>

										<div class="col-xs-3 hidden-sm hidden-md hidden-lg"
											 style="@backgroundColor font-weight: bold;">Difference:</div>
										<div id="@string.Format("theaterCountDifference{0}", movieCount)"
											 class="col-xs-3 col-sm-1"
											 style="@backgroundColor text-align: right;">--</div>
									}

									movieCount++;

									<div class="clearfix"></div>
								}
							}
						}

					</div>
				</div>
			</div>
		</div>

		@* ================================================================================================================================== BOX OFFICE COLUMN ==== *@

		<div class="col-md-12">

			<div class="col-md-6">

			</div>

			<div class="col-xs-12" width="100%" style="overflow-x: auto; white-space: nowrap; height: 250px; overflow-y: hidden;">
				<table>
					@{
						movieCount = 1;

						while (movieCount <= Model.Miners.First().Movies.Count)
						{
							<tr>
								@for (int col = 0; col < 15 && movieCount <= Model.Miners.First().Movies.Count; col++)
								{
									var movie = Model.Miners.First().Movies[movieCount - 1];

									var boId = string.Format("boId{0}", movieCount);
									var imageId = string.Format("imageId{0}", movie.ControlId);
									var name = string.Format("BoxOffice{0}", movieCount);

									// TODO: May want to use a utility to speed up the reflection.

									var value = (decimal)Model.GetType().GetProperty("BoxOffice" + movieCount)?.GetValue(Model);
									var valueString = string.Format("{0:N0}", value);
									var lastWeek = Model.Miners.Last().Movies?.FirstOrDefault(item => item.Name == movie.Name);
									var inputBackgroundColor = lastWeek == null ? "lightgreen" : "cyan";
									string boPercentBackgroundColorStyle = null;
									decimal percent = 0;
									var hasRows = false;

									// Build the tooltip from the miner values.

									var toolTip = new StringBuilder();

									toolTip.Append("<table>");

									foreach (var miner in Model.Miners.Where(item => !item.IsHidden).Skip(1))
									{
										var minerMovie = miner.Movies.FirstOrDefault(item => item.Name == movie.Name);

										if (minerMovie != null)
										{
											toolTip.Append("<tr><td style=\"padding: 5px;\">");
											toolTip.Append(miner.Abbreviation);
											toolTip.Append("</td><td style=\"padding: 5px;\">");

											if (!string.IsNullOrEmpty(miner.Error))
											{
												toolTip.Append(miner.Error);
											}
											else
											{
												toolTip.Append(minerMovie.EarningsBase.ToString("N0"));
											}

											if (lastWeek != null && minerMovie != null && lastWeek.EarningsBase > 0)
											{
												percent = (minerMovie.EarningsBase - lastWeek.EarningsBase) / lastWeek.EarningsBase * 100;
												boPercentBackgroundColorStyle = ViewUtility.PercentColorFromLastWeek(percent);

												toolTip.Append($"</td><td style=\"padding: 4px; color: black; {boPercentBackgroundColorStyle}\">{percent.ToString("N0")}%</td></tr>");
											}
											else
											{
												toolTip.Append("</td><td></td></tr>");
											}

											hasRows = true;
										}
									}

									if (!hasRows)
									{
										toolTip.Append("<tr><td>No data available (yet)</td></tr>");
									}

									toolTip.Append("</table>");

									boPercentBackgroundColorStyle = "background-color: white;";
									percent = 0;

									var myMovie = Model.Miners.ToList()[1].Movies.FirstOrDefault(item => item.Name == movie.Name);

									if (lastWeek != null && myMovie != null && lastWeek.EarningsBase > 0)
									{
										percent = (myMovie.EarningsBase - lastWeek.EarningsBase) / lastWeek.EarningsBase * 100;
										boPercentBackgroundColorStyle = ViewUtility.PercentColorFromLastWeek(percent);
									}

									var tableIndent = (percent == 0 || percent == -100m) ? "20px" : "2px";
									var backgroundStyle = (Model.Rank(movie) == 1) ? "box-shadow: 2px 4px 8px 0px green;" : "box-shadow: 2px 4px 8px 0px grey;";

									// THIS IS DIFFERENT THAN INDEX!!

									var tooltipPlacement = movieCount == 15 ? "left" : "right";

									<td style="padding: 3px;">

										<div>

											<div style="position: relative; width: 0; height: 0;">
												@if (movie.TheaterCount > 0)
												{
													if (lastWeek != null && (movie.TheaterCount - lastWeek.TheaterCount != 0))
													{
														if (movie.TheaterCount - lastWeek.TheaterCount > 0)
														{
															<span class="badge badge-pill badge-light"
																  data-toggle="tooltip"
																  data-placement="bottom"
																  title="Theater Count"
																  style="position: absolute; left: 20px; top: 5px;">
																@movie.TheaterCount
																<span class="glyphicon glyphicon-chevron-up" aria-hidden="true" style="color: lawngreen;"></span>
																@(movie.TheaterCount - lastWeek.TheaterCount)
															</span>
														}
														else if (movie.TheaterCount - lastWeek.TheaterCount < 0)
														{
															<span class="badge badge-pill badge-light"
																  data-toggle="tooltip"
																  data-placement="bottom"
																  title="Theater Count"
																  style="position: absolute; left: 20px; top: 5px;">
																@movie.TheaterCount
																<span class="glyphicon glyphicon-chevron-down" aria-hidden="true" style="color: red;"></span>
																@(lastWeek.TheaterCount - movie.TheaterCount)
															</span>
														}
													}
													else
													{
														<span class="badge badge-pill badge-light"
															  data-toggle="tooltip"
															  data-placement="bottom"
															  title="Theater Count"
															  style="position: absolute; left: 50px; top: 5px;">
															@movie.TheaterCount
														</span>
													}
												}

												<span class="glyphicon glyphicon-info-sign"
													  aria-hidden="true"
													  data-toggle="tooltip"
													  data-placement="@tooltipPlacement"
													  data-template='<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner" style="max-width: 400px;"></div><div class="tooltip-extra">@toolTip.ToString()</div></div>'
													  title="@string.Format("{0} - {1:N0} BUX", movie.Name, movie.Cost)"
													  style="position: absolute; left: 130px; top: 5px; color: white; cursor: pointer; border-radius: 5px; background: gray; opacity: 0.8">
												</span>

											</div>

											<img id="@imageId" class="img-responsive img-rounded" style="@backgroundStyle min-height: 220px; min-width: 150px;" src="@movie.ImageUrl" />

											<div style="position: relative; width: 0; height: 0">
												<table style="position: absolute; left: -5px; top: -225px; width: 10px; height: 210px; opacity: 0.7;">
													<tr>
														<td>
															@if (lastWeek != null && value > lastWeek.EarningsBase * 2)
															{
																// Adjust the slider to MORE than 100% since the value is already greater than 100% and the slider won't work.

																var sliderMax = (Math.Round(value / lastWeek.EarningsBase, 0) + 1) * 100;

																<input class="vertical-slider" orient="vertical" id="@string.Format("boSliderId{0}", movie.ControlId)" type="range" onchange="sliderOnChange(this, @movie.ControlId)" min="-100" max="@sliderMax" value="@string.Format("{0}", lastWeek == null ? "0" : percent.ToString("N0"))" />
															}
															else
															{
																<input class="vertical-slider" orient="vertical" id="@string.Format("boSliderId{0}", movie.ControlId)" type="range" onchange="sliderOnChange(this, @movie.ControlId)" min="-100" max="100" value="@string.Format("{0}", lastWeek == null ? "0" : percent.ToString("N0"))" />
															}
														</td>
													</tr>
												</table>
											</div>

											<div style="position: relative; width: 0; height: 0">
												<input name="@name"
													   class="form-control"
													   id="@boId"
													   onblur="boxOfficeLostFocus('@valueString', this.value, @movie.ControlId)"
													   style="position: absolute; left: 20px; top: -40px; background-color: @inputBackgroundColor; width: 100px; opacity: 0.8; box-shadow: inset 0 0 3px #000000"
													   type="text"
													   value="@valueString"
													   data-original-value="@string.Format("{0}", lastWeek == null ? myMovie.EarningsBase : lastWeek.EarningsBase)"
													   data-original-theater-count="@string.Format("{0}", lastWeek == null ? 0 : lastWeek.TheaterCount)"
													   data-val-required="The Box Office @movie.ControlId field is required."
													   data-val-number="The field Box Office @movie.ControlId must be a number."
													   data-val="true">

												<span id="@string.Format("{0}Pct", boId)" class="badge badge-pill badge-dark"
													  style="position: absolute; left: 100px; top: -50px; @boPercentBackgroundColorStyle color: black;">
													@percent.ToString("N0")%
												</span>

												<span id="@string.Format("{0}UpPct", boId)"
													  class="glyphicon glyphicon-triangle-top"
													  aria-hidden="true"
													  style="position: absolute; left: 130px; top: -30px; color: white; cursor: pointer;"
													  onclick="clickChangePercent(this, @movie.ControlId, 1)">
												</span>
												<span id="@string.Format("{0}DownPct", boId)"
													  class="glyphicon glyphicon-triangle-bottom"
													  aria-hidden="true"
													  style="position: absolute; left: 130px; top: -17px; color: white; cursor: pointer;"
													  onclick="clickChangePercent(this, @movie.ControlId, -1)">
												</span>
											</div>

										</div>
									</td>

									movieCount++;
								}
							</tr>
						}
					}
				</table>
			</div>
		</div>

	</div> @* end class="row" *@
}
