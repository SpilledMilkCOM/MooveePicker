@model MoviePicker.WebApp.Models.PicksViewModel

@using MovieMiner;
@using MoviePicker.Common.Interfaces;
@using MoviePicker.WebApp.Utilities;
@using System.Text;

@{
	ViewBag.Title = "Home";

	// The start of a miner traversal (skip custom)
	int minerCount = 2;     // This scope is pretty far, sorry  :(
}

<script type="text/javascript">

	var SCREEN_COUNT_MAX = 8;

	function boxOfficeLostFocus(oldValue, newValue) {

		if (oldValue != newValue) {
			clearWeights();

			clearMoviePicksPosters('bonusOnMovieList');
			clearMoviePicksPosters('bonusOffMovieList');
		}
	}

	function clearMoviePicksPosters(movieListId) {

		for (var movieCount = 0; movieCount < SCREEN_COUNT_MAX; movieCount++) {
			var image = $('#' + movieListId + '0' + movieCount);

			if (image != null) {
				//console.log(image.attr('src'));

				image.attr('src', '/Images/MooveePosterRecalculate.jpg');
			}
		}
	}

	function clearWeights() {
		//console.log("clearWeights");

		for (idx = @minerCount; idx <= 7; idx++) {
			$("#weightId" + idx).val(0);

			//console.log("#weightId" + idx + " = " + $("#weightId" + idx).val());
		}
	}

	function clickPasteBoxOffice() {
		var boValues = $("#pasteAreaId").val();
		var splitValues = boValues.split("\n");

		for (idx = 0; idx < 15 && idx < splitValues.length; idx++) {

			//console.log(idx + " = " + splitValues[idx]);

			if (idx < splitValues.length) {
				$("#boId" + (idx + 1)).val(splitValues[idx].trim());
			}
			else {
				$("#boId" + (idx + 1)).val("0");
			}
		}

		clearWeights();

		var parameters = parseBoxOfficeAndWeights();

		console.log(parameters);

		clickPicks();
	}

	function clickPicks() {

		console.log("clickPicks");

		var parameters = parseBoxOfficeAndWeights();

		console.log(parameters);

		var url = "/Home/Index2?" + parameters;

		var baseUrl = parseBaseUrl();

		console.log(baseUrl + url);

		window.location.href = baseUrl + url;

		console.log(window.location.href);
	}

	function clickTracking() {

		var parameters = parseBoxOfficeAndWeights();

		var url = "/Home/Tracking?" + parameters;

		var baseUrl = parseBaseUrl();

		window.location.href = baseUrl + url;
	}

	function parseBaseUrl() {
		var baseUrl = window.location.href;

		if (baseUrl != null) {
			var slashIdx = baseUrl.indexOf("/", "https://".length);

			if (slashIdx > 0) {
				baseUrl = baseUrl.substring(0, slashIdx);
			}
		}

		return baseUrl;
	}

	function parseBoxOfficeAndWeights() {

		var boList = "";
		var weightList = "";
		var weightTotal = 0;

		// The values should be synchronized so the values can be pulled from one set of fields.

		for (idx = 1; idx <= 15; idx++) {
			if (idx != 1) {
				boList += ",";
			}

			// Replace all commas (global g parameter on regular expression)
			boList += $("#boId" + idx).val().replace(/\,/g, "").replace("$", "");

			console.log(boList);
		}

		for (idx = @minerCount; idx <= 7; idx++) {
			if (idx != @minerCount) {
				weightList += ",";
			}

			// TODO: Request encode this.

			var weight = $("#weightId" + idx).val().replace(",", "").replace("$", "");

			weightList += weight;
			weightTotal += weight;

			console.log(weightList);
			console.log(weightTotal);
		}

		if (weightTotal == 0) {
			weightList = "1," + weightList;
		}
		else {
			weightList = "0," + weightList;
		}

		console.log(boList);

		return "bo=" + boList + "&wl=" + weightList;
	}

	function weightLostFocus(oldValue, newValue) {

		if (oldValue != newValue) {
			clearMoviePicksPosters('bonusOnMovieList');
			clearMoviePicksPosters('bonusOffMovieList');

			clickPicks();
		}
	}
</script>

@{
	//var weekendEnding = Model.Miners.First().Movies?.First().WeekendEnding.ToShortDateString();
	var weekendEnding = Model.Miners.First().ContainsEstimates ? MovieDateUtil.GameSunday(isEstimate: Model.Miners.First().ContainsEstimates).ToShortDateString() : Model.Miners.First().Movies?.FirstOrDefault()?.WeekendEnding.ToShortDateString();

	int movieCount = 1;     // This scope is pretty far, sorry  :(

	var compoundMovie = Model.Miners.FirstOrDefault(miner => miner.CompoundMovie != null)?.CompoundMovie;

	<div class="row">

		@* ================================================================================================================================== PICKS COLUMN ==== *@

		<div class="col-md-7">
			<div class="col-xs-4" style="padding-top: 20px;">
				<img class="img-responsive" src="~/Images/MooveePickerCow512x512.png" width="200" />
			</div>

			<div class="col-xs-8">
				<h2>
					WELCOME
				</h2>

				This website is used to aggregate box office movie data for use in the <a href="https://fantasymovieleague.com/" target="_blank">Fantasy Movie League</a>  game.
				This will help <strong>YOU</strong> gather the data so you can make better projections for your weekly picks.
				You may use the weights to determine how well you "trust" each source to generate your own numbers and then "Pick" your line-up which will be displayed on another page.

				@Html.ActionLink("Old Look", "Index", ViewUtility.RequestParamsToDynamic(Request), new { @class = "btn btn-info btn-sm" })
			</div>

			<div class="clearfix"></div>
			<div class="row-divider"> </div>

			<div id="picksColumn">
				@if (Model.MovieList != null)
				{
					@Html.Partial("MovieListMini2", Model.MovieList)
				}

				@if (Model.MovieListBonusOff != null)
				{
					@Html.Partial("MovieListMini2", Model.MovieListBonusOff)
				}
			</div>

			<input class="btn btn-success btn-lg"
				   onclick="clickPicks()"
				   type="button"
				   value="Calculate Picks"
				   data-toggle="tooltip"
				   data-placement="bottom"
				   title="Click to recalculate page...">

			@if (!string.IsNullOrEmpty(Request.QueryString.ToString()))
			{
				<a class="btn btn-info btn-lg"
				   href="@string.Format("MorePicks?{0}", Request.QueryString)"
				   data-toggle="tooltip"
				   data-placement="bottom"
				   title="View the top picks for both bonus ON and OFF (this is a bit slow... please be patient.)">
						More Picks...
				</a>
			}

			@if (Model.IsTracking)
			{
				<input class="btn btn-info btn-lg"
					   onclick="clickTracking()"
					   type="button"
					   value="Perfect Pick"
					   data-toggle="tooltip"
					   data-placement="bottom"
					   title="Click to track all the miners against the estimates..." />
			}

			<div class="clearfix"></div>
			<div class="row-divider"> </div>

			@* TODO - Put this in a partial view. *@

			<div style="border: solid; border-radius: 4px; border-width: 1px; padding: 8px;">
				<h4>Bonus Comparisons</h4>

				@*<div class="col-sm-1 hidden-xs" style="font-weight: bold;">Rank</div>*@
				<div class="col-sm-4 hidden-xs" style="font-weight: bold;">Name</div>
				<div class="col-sm-1 hidden-xs" style="font-weight: bold;">BUX</div>
				<div class="col-sm-2 hidden-xs" style="font-weight: bold; text-align: right;">Earnings</div>
				<div class="col-sm-1 hidden-xs" style="font-weight: bold; text-align: center;">Efficiency</div>
				<div class="col-sm-4 hidden-xs" style="font-weight: bold; text-align: center;">Difference</div>

				@{
					if (Model.Movies.Count() > 0)
					{
						var mostEfficient = Model.Movies.OrderByDescending(item => item.Efficiency).FirstOrDefault();

						movieCount = 0;

						foreach (var movie in Model.Movies.OrderByDescending(item => item.Efficiency))
						{
							var backgroundColor = movieCount == 0 ? "background-color: lightgreen;" : (movieCount % 2 == 0 ? "background-color: lightgrey;" : string.Empty);
							var rank = Model.Rank(movie);

							@*<div class="col-sm-1 hidden-xs" style="@backgroundColor text-align: right;">@rank</div>*@
							<div class="col-xs-12 col-sm-4" style="@backgroundColor font-weight: bold;">@movie.Name</div>
							<div class="col-xs-3 hidden-sm hidden-md hidden-lg" style="@backgroundColor font-weight: bold;">BUX:</div>
							<div class="col-xs-3 col-sm-1" style="@backgroundColor text-align: right;">@movie.Cost</div>

							<div class="col-xs-3 hidden-sm hidden-md hidden-lg" style="@backgroundColor font-weight: bold;">Earnings:</div>
							<div class="col-xs-3 col-sm-2" style="@backgroundColor text-align: right;">@string.Format("{0:N0}", movie.Earnings)</div>

							<div class="col-xs-3 hidden-sm hidden-md hidden-lg" style="@backgroundColor font-weight: bold;">Efficiency:</div>
							<div class="col-xs-3 col-sm-1" style="@backgroundColor text-align: right;">@string.Format("{0:N2}", movie.Efficiency / 1000m)</div>

							<div class="col-xs-6 hidden-sm hidden-md hidden-lg" style="@backgroundColor">--</div>

							<div class="col-xs-3 hidden-sm hidden-md hidden-lg" style="@backgroundColor font-weight: bold;">Difference:</div>

							if (movie.EarningsBase > 0)
							{
								var nextRankedMovie = Model.Movies.FirstOrDefault(item => Model.Rank(item) == rank + 1);

								// Compute difference columns.

								if (rank == 1)
								{
									if (nextRankedMovie != null)
									{
										//How much does the top rank have to LOSE before it's no longer the TOP
										<div class="col-xs-3 col-sm-2" style="@backgroundColor text-align: right;">@string.Format("{0:N0}", nextRankedMovie.Efficiency * movie.Cost - movie.EarningsBase)</div>
										<div class="col-xs-2 col-sm-1" style="@backgroundColor text-align: right;">--</div>
										<div class="col-xs-2 col-sm-1" style="@backgroundColor text-align: right; color: #cc3333;">@string.Format("{0:N1}%", (nextRankedMovie.Efficiency * movie.Cost - movie.EarningsBase) / movie.EarningsBase * 100)</div>
									}
								}
								else
								{
									//How much does current rank to GAIN to be the TOP

									<div class="col-xs-3 col-sm-2" style="@backgroundColor text-align: right;">@string.Format("{0:N0}", mostEfficient.Efficiency * movie.Cost - movie.EarningsBase)</div>
									<div class="col-xs-2 col-sm-1" style="@backgroundColor text-align: right; color: #33cc33">@string.Format("{0:N1}%", (mostEfficient.Efficiency * movie.Cost - movie.EarningsBase) / movie.EarningsBase * 100)</div>

									if (nextRankedMovie != null)
									{
										<div class="col-xs-2 col-sm-1" style="@backgroundColor text-align: right; color: #cc3333">@string.Format("{0:N1}%", (nextRankedMovie.Efficiency * movie.Cost - movie.EarningsBase) / movie.EarningsBase * 100)</div>
									}
									else
									{
										<div class="col-xs-2 col-sm-1" style="@backgroundColor text-align: right;">--</div>
									}
								}

								movieCount++;
							}

							<div class="clearfix"></div>
						}
					}
				}

				<div class="row-divider"> </div>

				<div class="col-sm-10 col-sm-offset-1">
					The table above compares ALL of the movies to the MOST efficient one.
					The Bonus Earnings column is the value that the movie WOULD need to have the top efficiency or at least MATCH top efficiency.
					The Difference column is the dollar amount of gain, and the % Difference is just that; Difference divided the actual earnings (percentage gain).
					The MOST efficient movie shows how much it would have to drop to match second place.
				</div>

			</div>
		</div>

		@* ================================================================================================================================== BOX OFFICE COLUMN ==== *@

		<div class="col-md-5">

			<div class="col-md-12">
				<h4>Weekend ending @weekendEnding (@Model.Duration.ToString("N0") ms)</h4>

				<div class="col-xs-10">
					<textarea class="form-control" id="pasteAreaId" rows="3" style="background-color: lightcyan; vertical-align: top;"
							  placeholder="Paste your 15 Box Office values here (use CR/LF to separate values) and then press 'Import'"></textarea>
				</div>
				<div class="col-xs-2">
					<input class="btn btn-info" onclick="clickPasteBoxOffice()" type="button" value="Import" data-toggle="tooltip" data-placement="bottom" title="Click to set Box Office predictions." />
				</div>
			</div>

			<div class="clearfix"></div>
			<div class="row-divider"> </div>

			<div class="col-xs-10">

				@foreach (var miner in Model.Miners.Where(item => !item.IsHidden).Skip(1))
				{
					var buttonStyle = miner.Movies.Any() ? "btn-success" : "btn-info";
					var weightId = string.Format("weightId{0}", minerCount);
					var name = string.Format("Weight{0}", minerCount);
					//var badge = miner.Movies.Any() ? string.Format("<span class=\"badge badge-pill badge-light\">{0}</span>", miner.Movies.Count) : string.Empty;

					// TODO: May want to use a utility to speed up the reflection.

					var valueString = string.Format("{0:N0}", Model.GetType().GetProperty("Weight" + minerCount)?.GetValue(Model));

					<div class="col-xs-2" style="text-align: center;">
						<a class="btn @buttonStyle btn-xs"
						   href="@miner.UrlSource"
						   target="_blank"
						   data-toggle="tooltip"
						   data-placement="bottom"
						   title="Click for '@miner.Name' source page... (last updated @string.Format("{0}", ((ICache)miner).LastLoaded.ToString()))">
							@miner.Abbreviation
							@*<span class="badge badge-pill badge-light">@miner.Movies.Count</span>*@
						</a>

						<input name="@name"
							   class="form-control"
							   id="@weightId"
							   onblur="weightLostFocus('@valueString', this.value)"
							   style="background-color: #dfffdf; width: 50px;"
							   type="text"
							   value="@valueString"
							   data-val-required="The Weight @minerCount field is required."
							   data-val-number="The field Weight @minerCount must be a number."
							   data-val="true">
					</div>

					minerCount++;
				}
			</div>

			<div class="col-xs-2">
				<a class="btn btn-success btn-xs"
				   href="@string.Format("ExpertPicks?{0}", Request.QueryString)"
				   data-toggle="tooltip"
				   data-placement="bottom"
				   title="Click to see the available picks by the experts...">Expert<br />Picks...</a>
			</div>

			<div class="clearfix"></div>
			<div class="row-divider"> </div>

			<table>
				@{
					movieCount = 1;

					while (movieCount <= Model.Miners.First().Movies.Count)
					{
						<tr>
							@for (int col = 0; col < 3; col++)
							{
								var movie = Model.Miners.First().Movies[movieCount - 1];

								var boId = string.Format("boId{0}", movieCount);
								var name = string.Format("BoxOffice{0}", movieCount);

								// TODO: May want to use a utility to speed up the reflection.

								var value = (decimal)Model.GetType().GetProperty("BoxOffice" + movieCount)?.GetValue(Model);
								var valueString = string.Format("{0:N0}", value);
								var lastWeek = Model.Miners.Last().Movies?.FirstOrDefault(item => item.Name == movie.Name);
								var inputBackgroundColor = lastWeek == null ? "lightgreen" : "cyan";
								string divBackgroundColorStyle = null;
								decimal percent = 0;
								var hasRows = false;

								// Build the tooltip from the miner values.

								var toolTip = new StringBuilder();

								toolTip.Append("<table>");

								foreach (var miner in Model.Miners.Where(item => !item.IsHidden).Skip(1))
								{
									var minerMovie = miner.Movies.FirstOrDefault(item => item.Name == movie.Name);

									if (minerMovie != null)
									{
										toolTip.Append("<tr><td style=\"padding: 5px;\">");
										toolTip.Append(miner.Abbreviation);
										toolTip.Append("</td><td style=\"padding: 5px;\">");

										if (!string.IsNullOrEmpty(miner.Error))
										{
											toolTip.Append(miner.Error);
										}
										else
										{
											toolTip.Append(minerMovie.EarningsBase.ToString("N0"));
										}

										if (lastWeek != null && minerMovie != null && lastWeek.EarningsBase > 0)
										{
											percent = (minerMovie.EarningsBase - lastWeek.EarningsBase) / lastWeek.EarningsBase * 100;
											divBackgroundColorStyle = ViewUtility.PercentColorFromLastWeek(percent);

											toolTip.Append($"</td><td style=\"padding: 4px; color: black; {divBackgroundColorStyle}\">{percent.ToString("N0")}%</td></tr>");
										}
										else
										{
											toolTip.Append("</td><td></td></tr>");
										}

										hasRows = true;
									}
								}

								if (!hasRows)
								{
									toolTip.Append("<tr><td>No data available (yet)</td></tr>");
								}

								toolTip.Append("</table>");

								divBackgroundColorStyle = null;
								percent = 0;

								var myMovie = Model.Miners.ToList()[1].Movies.FirstOrDefault(item => item.Name == movie.Name);

								if (lastWeek != null && myMovie != null && lastWeek.EarningsBase > 0)
								{
									percent = (myMovie.EarningsBase - lastWeek.EarningsBase) / lastWeek.EarningsBase * 100;
									divBackgroundColorStyle = ViewUtility.PercentColorFromLastWeek(percent);
								}

								var tableIndent = (percent == 0 || percent == -100m) ? "20px" : "2px";
								var backgroundStyle = (Model.Rank(movie) == 1) ? "box-shadow: 2px 4px 8px 0px green;" : "box-shadow: 2px 4px 8px 0px grey";

								<td style="padding: 3px;">

									<div data-toggle="tooltip" data-placement="top"
										 data-template='<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner" style="max-width: 400px;"></div><div class="tooltip-extra">@toolTip.ToString()</div></div>'
										 title="@string.Format("{0} - {1:N0} BUX", movie.Name, movie.Cost)">

										<img class="img-responsive img-rounded" style="@backgroundStyle" src="@movie.ImageUrl" />

										@*<div style="position: relative; top: -100px; left: 20px; float: left; background-color: white; padding: 5px">*@
										@*<div style="position: relative; top: -50px; left: 30px; float: left; opacity: 0.75">*@

										<table style="position: relative; top: -50px; left: @tableIndent; float: left;">
											<tr>
												<td>
													<input name="@name"
														   class="form-control"
														   id="@boId"
														   onblur="boxOfficeLostFocus('@valueString', this.value)"
														   style="background-color: @inputBackgroundColor; width: 100px; opacity: 0.8; box-shadow: inset 0 0 3px #000000"
														   type="text"
														   value="@valueString"
														   data-val-required="The Box Office @movieCount field is required."
														   data-val-number="The field Box Office @movieCount must be a number."
														   data-val="true">
												</td>
												@if (percent == 0 || percent == -100m)
												{
													<td></td>
												}
												else
												{
													<td style="padding-left: 3px;"><div style="@divBackgroundColorStyle; border-radius: 3px; padding: 3px;">@percent.ToString("N0")%</div></td>
												}
											</tr>
										</table>
									</div>
								</td>

								movieCount++;
							}
						</tr>
					}
				}
			</table>
		</div>
	</div>
}

<script type="text/javascript">
							//window.onscroll = function () { scrollPicksColumn() };

							//var picksColumn = document.getElementById("picksColumn");
							//var picksColumnOffset = picksColumn.offsetTop;

							//function scrollPicksColumn() {
							//	console.log(window.pageYOffset);
							//	console.log(picksColumnOffset);

							//	if (window.pageYOffset >= picksColumnOffset) {
							//		picksColumn.classList.add("sticky");
							//	} else {
							//		picksColumn.classList.remove("sticky");
							//	}
							//}
</script>