@model  MoviePicker.WebApp.Models.IndexViewModel

@using MovieMiner;
@using MoviePicker.Common.Interfaces;

@{
	ViewBag.Title = "Home";
	const string myColumnFormat = "{0:F0}";
}

<script type="text/javascript">

	function clickClearWeights(idxStart) {
		if (idxStart == 2) {
			$("#weightId1").val(1)
			$("#weightmId1").val(1)
		}

		for (idx = idxStart; idx <= 7; idx++) {
			$("#weightId" + idx).val(0)
			$("#weightmId" + idx).val(0)
		}
	}

	function clickPasteBoxOffice() {
		var boValues = $("#pasteAreaId").val()
		var splitValues = boValues.split("\n");

		for (idx = 0; idx < 15; idx++) {

			//console.log(idx + " = " + splitValues[idx]);

			if (idx < splitValues.length) {
				$("#boId" + (idx + 1)).val(splitValues[idx].trim())
				$("#bomId" + (idx + 1)).val(splitValues[idx].trim())
			}
			else {
				$("#boId" + (idx + 1)).val(splitValues[idx].trim())
				$("#bomId" + (idx + 1)).val(splitValues[idx].trim())
			}
		}

		// Blank out the field so you know you clicked on something.

		$("#pasteAreaId").val("")
	}

	function clickPicks() {

		var parameters = parseBoxOfficeWeights()

		var url = "/home/picks?" + parameters

		var baseUrl = parseBaseUrl()

		window.location.href = baseUrl + url
	}

	function clickTracking() {

		var parameters = parseBoxOfficeWeights()

		var url = "/home/tracking?" + parameters

		var baseUrl = parseBaseUrl()

		window.location.href = baseUrl + url
	}

	function clickRecalc(viewName) {

		synchronizeBoxOfficeWeights(viewName);

		var parameters = parseBoxOfficeWeights(viewName)

		var url = "/home/index?" + parameters

		var baseUrl = parseBaseUrl()

		window.location.href = baseUrl + url
	}

	function parseBaseUrl() {
		var baseUrl = window.location.href

		if (baseUrl != null) {
			var slashIdx = baseUrl.indexOf("/", "https://".length)

			if (slashIdx > 0) {
				baseUrl = baseUrl.substring(0, slashIdx)
			}
		}

		return baseUrl
	}

	function parseBoxOfficeWeights(viewName) {

		var boList = ""
		var weightList = ""

		// The values should be synchronized so the values can be pulled from one set of fields.

		for (idx = 1; idx <= 15; idx++) {
			if (idx != 1) {
				boList += ","
			}

			// Replace all commas (global g parameter on regular expression)
			boList += $("#boId" + idx).val().replace(/\,/g, "").replace("$", "")
		}

		for (idx = 1; idx <= 7; idx++) {
			if (idx != 1) {
				weightList += ","
			}

			// TODO: Request encode this.

			weightList += $("#weightId" + idx).val().replace(",", "").replace("$", "")
		}

		return "bo=" + boList + "&wl=" + weightList
	}

	function synchronizeBoxOfficeWeights(viewName) {

		// Copies the values from source fields to destination fields.

		var boIdSource = "#boId"
		var weightIdSource = "#weightId"
		var boIdDest = "#bomId"
		var weightIdDest = "#weightmId"

		if (viewName == "card") {
			boIdSource = "#bomId"
			weightIdSource = "#weightmId"
			boIdDest = "#boId"
			weightIdDest = "#weightId"
		}

		for (idx = 1; idx <= 15; idx++) {
			$(boIdDest + idx).val($(boIdSource + idx).val())
		}

		for (idx = 1; idx <= 7; idx++) {
			$(weightIdDest + idx).val($(weightIdSource + idx).val())
		}
	}
</script>

@{
	//var weekendEnding = Model.Miners.First().Movies?.First().WeekendEnding.ToShortDateString();
	var weekendEnding = Model.Miners.First().ContainsEstimates ? MovieDateUtil.GameSunday(isEstimate: Model.Miners.First().ContainsEstimates).ToShortDateString() : Model.Miners.First().Movies?.FirstOrDefault()?.WeekendEnding.ToShortDateString();

	int movieCount = 1;     // This scope is pretty far, sorry  :(
	bool first = true;
}

<div class="row">
	<div class="col-xs-3 col-md-2" style="padding-top: 20px;">
		<img class="img-responsive" src="~/Images/MooveePickerCow512x512.png" width="200" />
	</div>

	<div class="col-xs-9 col-sm-6 col-md-4">
		<h2>
			WELCOME
		</h2>

		This website is used to aggregate box office movie data for use in the <a href="https://fantasymovieleague.com/" target="_blank">Fantasy Movie League</a>  game.
		This will help <strong>YOU</strong> gather the data so you can make better projections for your weekly picks.
		You may use the weights to determine how well you "trust" each source to generate your own numbers and then "Pick" your line-up which will be displayed on another page.
	</div>

	<div class="col-md-6">
		<h4>Weekend ending @weekendEnding (@Model.Duration.ToString("N0") ms)</h4>

		<div class="col-sm-5">
			<textarea class="col-xs-12 form-control" id="pasteAreaId" rows="5" style="background-color: lightcyan; vertical-align: top;"
					  placeholder="Paste your 15 Box Office values here (use CR/LF to separate values)"></textarea>
		</div>
		<div class="col-sm-7 hidden-xs hidden-sm">
			<div>Paste your Box Office values into the field to load your custom picks and then press "Import Box Office"</div>
		</div>
		<div class="col-sm-5">
			<input class="btn btn-info" onclick="clickPasteBoxOffice()" type="button" value="Import Box Office" data-toggle="tooltip" data-placement="bottom" title="Click to set Box Office predictions." />
		</div>
	</div>
</div>

@if (Model.IsTracking)
{
	<div class="row-divider"> </div>

	<div class="row">

		<div class="col-sm-3">
			<input class="btn btn-info"
				   onclick="clickTracking()"
				   type="button"
				   value="Track your picks with the estimates..."
				   data-toggle="tooltip"
				   data-placement="bottom"
				   title="Click to track all the miners against the estimates..." />
		</div>
	</div>
}

<div class="row-divider"> </div>

@* Showing the data from ALL of the sources/miners ====================================================================================== GRID VIEW ==== *@

@{
	movieCount = 1;
	first = true;
	var compoundMovie = Model.Miners.FirstOrDefault(miner => miner.CompoundMovie != null)?.CompoundMovie;

	@*style = "background-image: url('@movie.ImageUrl')"*@

	<div class="row">
		@foreach (var movie in Model.Miners.First().Movies)
		{
			var id = string.Format("boId{0}", movieCount);
			var name = string.Format("BoxOffice{0}", movieCount);

			// TODO: May want to use a utility to speed up the reflection.

			var value = (decimal)Model.GetType().GetProperty("BoxOffice" + movieCount)?.GetValue(Model);
			var valueString = string.Format("{0:N0}", value);

			<div class="col-xs-6 col-sm-4 col-md-3 col-lg-2" style="padding-top: 5px; padding-bottom: 5px;">
				<img class="img-responsive img-rounded" src="@movie.ImageUrl" />
				@*<div style="position: relative; top: -100px; left: 20px; float: left; background-color: white; padding: 5px">*@
				@*<div style="position: relative; top: -50px; left: 30px; float: left; opacity: 0.75">*@
				@*<div>
						@movie.Name
					</div>
				*@

				@*<div style="font-weight: bold;">
						@movie.Cost
					</div>
				*@

				@*<rect width="200px" height="100px" style="background-color: white; opacity: 0.6;" />*@

				<input name="@name"
					   class="form-control"
					   id="@id"
					   style="background-color: lightcyan; width: 100px;"
					   type="text"
					   value="@valueString"
					   data-val-required="The Box Office @movieCount field is required."
					   data-val-number="The field Box Office @movieCount must be a number."
					   data-val="true">

				@*</div>*@

			</div>

			movieCount++;
		}
	</div>

	<div class="row-divider"> </div>

	<input class="btn btn-success btn-lg"
		   onclick="clickPicks()"
		   type="button"
		   value="Calculate Picks..."
		   data-toggle="tooltip"
		   data-placement="bottom"
		   title="Click to apply weights and recalculate Custom column...">
}
