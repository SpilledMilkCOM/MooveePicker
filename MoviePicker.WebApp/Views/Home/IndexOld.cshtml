@model  MoviePicker.WebApp.ViewModels.IndexViewModel

@using MovieMiner;
@using MoviePicker.Common.Interfaces;
@using MoviePicker.WebApp.Models;
@using MoviePicker.WebApp.Utilities;

@{
	ViewBag.Title = "Home";
	const string myColumnFormat = "{0:F0}";
}

<script type="text/javascript">

	function clickClearWeights(idxStart) {

		logit("clickClearWeights");

		if (idxStart == 2) {
			$("#weightId1").val(1);
		}

		for (idx = idxStart; idx <= 7; idx++) {
			$("#weightId" + idx).val(0);
		}
	}

	function clickPasteBoxOffice() {
		var boValues = $("#pasteAreaId").val();
		var splitValues = boValues.split("\n");

		for (idx = 0; idx < 15; idx++) {

			//console.log(idx + " = " + splitValues[idx]);

			if (idx < splitValues.length) {
				$("#boId" + (idx + 1)).val(splitValues[idx].trim());
			}
			else {
				$("#boId" + (idx + 1)).val(splitValues[idx].trim());
			}
		}

		// Blank out the field so you know you clicked on something.

		$("#pasteAreaId").val("");
	}

	function clickPicks() {

		var parameters = parseBoxOfficeWeights();

		var url = "/Home/Index?" + parameters;

		var baseUrl = parseBaseUrl();

		window.location.href = baseUrl + url;
	}

	function clickTracking() {

		var parameters = parseBoxOfficeWeights();

		var url = "/Home/Tracking?" + parameters;

		var baseUrl = parseBaseUrl();

		window.location.href = baseUrl + url;
	}

	function clickRecalc(viewName) {

		logit("clickRecalc");

		var parameters = parseBoxOfficeWeights(viewName);

		var url = "/Home/IndexOld?" + parameters;

		var baseUrl = parseBaseUrl();

		window.location.href = baseUrl + url;
	}

	function parseBaseUrl() {
		var baseUrl = window.location.href;

		if (baseUrl != null) {
			var slashIdx = baseUrl.indexOf("/", "https://".length);

			if (slashIdx > 0) {
				baseUrl = baseUrl.substring(0, slashIdx);
			}
		}

		return baseUrl;
	}

	function parseBoxOfficeWeights(viewName) {

		logit("parseBoxOfficeWeights");

		var boList = "";
		var weightList = "";

		// The values should be synchronized so the values can be pulled from one set of fields.

		for (idx = 1; idx <= 15; idx++) {
			if (idx != 1) {
				boList += ",";
			}

			// Replace all commas (global g parameter on regular expression)
			boList += $("#boId" + idx).val().replace(/\,/g, "").replace("$", "");
		}

		for (idx = 1; idx <= 7; idx++) {
			if (idx != 1) {
				weightList += ",";
			}

			// TODO: Request encode this.

			var weightField = $("#weightId" + idx);

			logit(weightField);

			if (weightField != null && weightField.val() != null) {
				// The field might be hidden so check for it first.
				weightList += weightField.val().replace(",", "").replace("$", "");
			}
		}

		return "bo=" + boList + "&wl=" + weightList;
	}

</script>

@{
	var weekendEnding = Model.Miners.First().Movies?.FirstOrDefault()?.WeekendEnding.ToString("ddd MM/dd/yyyy");

	int movieCount = 1;     // This scope is pretty far, sorry  :(
	bool first = true;
}

<div class="row">
	<div class="col-xs-3 col-md-2 col-md-offset-1" style="padding-top: 20px;">
		<img class="img-responsive" src="~/Images/MooveePickerCow512x512.png" width="200" />
	</div>

	<div class="col-xs-9 col-sm-6 col-md-4">
		<h2>
			WELCOME
			<div class="btn btn-info btn-xs" style="font-size: large;" data-toggle="tooltip" data-placement="bottom"
				 title="The following table is an aggregation of data for the &quot;play&quot; week ending @weekendEnding for the Fantasy Movie League website.
				Currently the site aggregates box office data from Todd Thatcher's post on FML, Box Office Pro, Box Office Mojo, Box Office Report, Culture Vulture, and Box Office Prophet.
				These are the &quot;experts&quot; in the field.  YOUR job is to determine who you trust and by how much and apply a weighting mechanism before you make your game picks.">
				<span class="glyphicon glyphicon-info-sign" aria-hidden="true"></span>
			</div>
		</h2>

		This website is used to aggregate box office movie data for use in the <a href="https://fantasymovieleague.com/" target="_blank">Fantasy Movie League</a>  game.
		This will help <strong>YOU</strong> gather the data so you can make better projections for your weekly picks.
		You may use the weights to determine how well you "trust" each source to generate your own numbers and then "Pick" your line-up which will be displayed on another page.

		@Html.ActionLink("Home", "Index", ViewUtility.RequestParamsToDynamic(Request), new { @class = "btn btn-info btn-sm" }) (@Model.Duration.ToString("N0") ms)
	</div>

	<div class="col-sm-6 col-md-4">
		<h2>Fantasy Movie League Family</h2>

		Not sure how you found the site.  Could have been from a post or a tweet.
		Make sure you follow me on Twitter, that can be found at the bottom of each page.
		More detail is on the @Html.ActionLink("About", "About", "LowMem") page.

		<div class="row-divider"> </div>

		Please stay tuned as this website will evolve into something that is more helpful with your picks in the future as time permits.
	</div>
</div>

@if (Model.IsTracking)
{
	<div class="row-divider"> </div>

	<div class="row">

		<div class="col-sm-3">
			<input class="btn btn-info"
				   onclick="clickTracking()"
				   type="button"
				   value="Track your picks with the estimates..."
				   data-toggle="tooltip"
				   data-placement="bottom"
				   title="Click to track all the miners against the estimates..." />
		</div>
	</div>
}

<div class="row-divider"> </div>

<div class="row">
	<div class="col-sm-8 col-sm-offset-1">

		<div class="col-sm-5">
			<textarea class="col-xs-12 form-control" id="pasteAreaId" rows="5" style="background-color: lightcyan; vertical-align: top;"
					  placeholder="Paste your 15 Box Office values here (use CR/LF to separate values)"></textarea>
		</div>
		<div class="col-sm-7 hidden-xs hidden-sm">
			<div>Paste your Box Office values into the field to load your custom picks and then press "Import Box Office"</div>
		</div>
		<div class="col-sm-5">
			<input class="btn btn-info" onclick="clickPasteBoxOffice()" type="button" value="Import Box Office" data-toggle="tooltip" data-placement="bottom" title="Click to set Box Office predictions." />
		</div>
	</div>
</div>

<div class="row-divider"> </div>

<div class="row">
	<div class="col-md-offset-1 col-md-10">

		@* Showing the data from ALL of the sources/miners ====================================================================================== GRID VIEW ==== *@

		@{
			movieCount = 1;
			first = true;

			<table class="table table-responsive" style="width: 100%">
				<thead>
					<tr>

						@*========== The Header Buttons for the source data ==========*@

						<th style="text-align: center;">
							<a class="btn btn-info btn-xs" href="@string.Format("{0}", Model.Miners.FirstOrDefault()?.UrlSource)" data-toggle="tooltip" data-placement="bottom" title="Click for FML BUX source page...">BUX</a>
						</th>

						<th style="text-align: center;">
							<input class="btn btn-info btn-xs"
								   onclick="clickRecalc('grid')"
								   type="button"
								   value="Custom"
								   data-toggle="tooltip"
								   data-placement="bottom"
								   title="Click to apply weights and recalculate Custom column..." />
						</th>

						@foreach (var miner in Model.Miners.Where(item => !item.IsHidden).Skip(1))
						{
							var buttonStyle = miner.Movies.Any() ? "btn-success" : "btn-info";
							var errorDetail = string.IsNullOrEmpty(miner.ErrorDetail) ? string.Empty : string.Format("[Error - {0}]", miner.ErrorDetail);
							var lastUpdated = ((ICache)miner).LastLoaded.HasValue ? string.Format("(last updated {0})", ((ICache)miner).LastLoaded) : string.Empty;
							var toolTip = string.Format("Click for '{0}' source page... {1}{2}"
														, miner.Name, lastUpdated, errorDetail);

							<th style="text-align: center;">
								<a class="btn @buttonStyle btn-xs" href="@miner.UrlSource" target="_blank" data-toggle="tooltip" data-placement="bottom"
								   title="@toolTip">
									@miner.Abbreviation &nbsp;
									@if (miner.Movies.Count > 0)
									{
										<span class="badge badge-pill badge-light"
											  data-toggle="tooltip"
											  data-placement="top"
											  title="Total Movies Estimated">@miner.Movies.Count</span>

										}
								</a>
							</th>
						}
					</tr>
					<tr>

						@*========== The Error Row ==========*@

						<td></td>
						<td></td>
						@*<td></td>*@

						@foreach (var miner in Model.Miners.Where(item => !item.IsHidden).Skip(1))
						{

							if (!string.IsNullOrEmpty(miner.Error))
							{
								<td style="text-align: center; color: #cc3333">@miner.Error</td>
							}
							else
							{
								<td></td>
							}
							@*<td></td>*@
						}
					</tr>
				</thead>

				<tbody>

					@* Are there any compound movies?  Movie(s) that are split up into multiple days. *@

					@{
						var compoundMovie = Model.Miners.FirstOrDefault(miner => miner.CompoundMovie != null)?.CompoundMovie;

						if (compoundMovie != null)
						{
							var compoundMovieImageUrl = compoundMovie.ImageUrl.Replace($"-{compoundMovie.Day.Value.ToString()}", string.Empty);

							<tr>
								<td>
									<img height="100" src="@compoundMovieImageUrl" />
								</td>
								<td>@compoundMovie.MovieName TOTAL</td>

								@foreach (var miner in Model.Miners.Skip(2))
								{
									var compoundTotal = miner.CompoundTotal;

									<td>@string.Format("{0}", compoundTotal > 0 ? compoundTotal.ToString("N0") : string.Empty)</td>
								}
							</tr>
						}
					}

					@foreach (var movie in Model.Miners.First().Movies)
					{
						var lastWeek = Model.Miners.Last().Movies?.FirstOrDefault(item => item.Name == movie.Name);
						var movieIsNewStyle = lastWeek == null ? "background-color: #C3FDB8;" : string.Empty;           // Color light-jade
						bool isFirst = true;
						decimal theaterCountPercent = 0;

						if (lastWeek != null && movie.TheaterCount > 0)
						{
							theaterCountPercent = ((decimal)movie.TheaterCount - lastWeek.TheaterCount) / movie.TheaterCount * 100;
						}

						var theaterCountColorStyle = ViewUtility.PercentColorFromLastWeek(theaterCountPercent);
						var theaterCountTextStyle = (theaterCountPercent >= 0) ? "color: black;" : "color: red";

						if (Math.Abs(theaterCountPercent) < 20)
						{
							theaterCountColorStyle = "background-color: gray;";
						}

						<tr style="@movieIsNewStyle ">

							@* Movie Image *@

							<td>
								@if (movie.Day.HasValue)
								{
									<img height="100" src="@movie.ImageUrl" style="border-radius: 3px; box-shadow: 2px 4px 8px 0px grey; position: relative; bottom: -15px; float: left;" />
								}
								else
								{
									<img height="100" src="@movie.ImageUrl" style="border-radius: 3px; box-shadow: 2px 4px 8px 0px grey" />
								}
							</td>

							@* Movie Details and edit field *@

							<td>
								<div style="font-weight: bold;">
									@movie.Name
								</div>

								@{
									// TODO: May want to use a utility to speed up the reflection.
									var value = (decimal)Model.GetType().GetProperty("BoxOffice" + movieCount)?.GetValue(Model);
									var valueString = string.Format("{0:N0}", value);
									decimal customPercent = 0;
									var boPercentBackgroundColorStyle = "background-color: white;";

									if (lastWeek != null && movie != null && lastWeek.EarningsBase > 0 && value != 0)
									{
										customPercent = (value - lastWeek.EarningsBase) / lastWeek.EarningsBase * 100;
										boPercentBackgroundColorStyle = ViewUtility.PercentColorFromLastWeek(customPercent);
									}

									if (customPercent != 0)
									{
										<span class="badge badge-pill badge-dark"
											  data-toggle="tooltip"
											  data-placement="top"
											  title="Gain or loss from previous week."
											  style="@boPercentBackgroundColorStyle color: black;">
											@customPercent.ToString("N0")%
										</span>
									}

									var id = string.Format("boId{0}", movieCount);
									var name = string.Format("BoxOffice{0}", movieCount);

									@*The majority of this input was taken from Html.TextBoxFor*@

									<input name="@name"
										   class="form-control"
										   id="@id"
										   style="background-color: lightcyan; width: 100px;"
										   type="text"
										   value="@valueString"
										   data-val-required="The Box Office @movieCount field is required."
										   data-val-number="The field Box Office @movieCount must be a number."
										   data-val="true">
								}
								<span style="font-weight: bold;">
									@movie.Cost BUX &nbsp;&nbsp;

									@if (movie.TheaterCount > 0)
									{
										if (lastWeek != null && (movie.TheaterCount - lastWeek.TheaterCount != 0))
										{
											if (movie.TheaterCount - lastWeek.TheaterCount > 0)
											{
												<span class="badge badge-pill badge-light"
													  data-toggle="tooltip"
													  data-placement="top"
													  title="Theater Count">
													@movie.TheaterCount
													<span class="glyphicon glyphicon-chevron-up" aria-hidden="true" style="color: lawngreen;"></span>
													@(movie.TheaterCount - lastWeek.TheaterCount)
												</span>
											}
											else if (movie.TheaterCount - lastWeek.TheaterCount < 0)
											{
												<span class="badge badge-pill badge-light"
													  data-toggle="tooltip"
													  data-placement="top"
													  title="Theater Count">
													@movie.TheaterCount
													<span class="glyphicon glyphicon-chevron-down" aria-hidden="true" style="color: red;"></span>
													@(lastWeek.TheaterCount - movie.TheaterCount)
												</span>
											}
										}
										else
										{
											<span class="badge badge-pill badge-light"
												  data-toggle="tooltip"
												  data-placement="top"
												  title="Theater Count">
												@movie.TheaterCount
											</span>
										}
									}
								</span>
							</td>

							@foreach (var miner in Model.Miners.Where(item => !item.IsHidden))
							{
								var minerMovie = miner.Movies?.FirstOrDefault(item => item.Name == movie.Name);

								if (isFirst)
								{
									isFirst = false;
								}
								else
								{
									<td style="text-align: right">
										<div>
											@string.Format("{0}", minerMovie?.Earnings.ToString("N0"))
										</div>

										@{
											if (miner != Model.Miners.Last())
											{
												decimal percent = 0;

												if (lastWeek != null && minerMovie != null && lastWeek.EarningsBase > 0)
												{
													percent = (minerMovie.EarningsBase - lastWeek.EarningsBase) / lastWeek.EarningsBase * 100;
												}

												if (percent != 0)
												{
													var divColorStyle = ViewUtility.PercentColorFromLastWeek(percent);

													<span class="badge badge-pill badge-dark"
														  data-toggle="tooltip"
														  data-placement="top"
														  title="Gain or loss from previous week."
														  style="@divColorStyle color: black;">
														@percent.ToString("N0")%
													</span>
												}
											}
										}
									</td>
								}
							}
						</tr>

						movieCount++;
					}

					@* ================================================================================================================================== MINER WEIGHT ROW ==== *@

					<tr>
						<td></td>
						<td></td>

						@foreach (var miner in Model.Miners.Where(item => !item.IsHidden).Skip(1))
						{
							var isSource = miner == Model.Miners.Last() || !miner.Movies.Any();
							var buttonStyle = isSource ? "btn-info" : "btn-success";
							var href = isSource ? miner.UrlSource : $"~/Home/Picks?{Model.WeightListForMiner(miner)}";
							var title = isSource ? $"Click for '{miner.Name}' source page... (last updated {((ICache)miner).LastLoaded.ToString()}"
												: $"Click for '{miner.Name}' dedicated picks...";

							<td style="text-align: center">
								<a class="btn @buttonStyle btn-xs"
								   href="@href"
								   data-toggle="tooltip"
								   data-placement="bottom"
								   title="@title">
									@miner.Abbreviation
								</a>
							</td>
						}
					</tr>

					<tr>
						<td>
							<input class="btn btn-info"
								   onclick="clickRecalc()"
								   type="button"
								   value="Apply"
								   data-toggle="tooltip"
								   data-placement="bottom"
								   title="Click to apply weights and recalculate Mine/Custom column..." />

							<input class="btn btn-info"
								   onclick="clickClearWeights(2)"
								   type="button"
								   value="Clear"
								   data-toggle="tooltip"
								   data-placement="bottom"
								   title="Click to clear the miners' weights." />
						</td>

						@for (int minerCount = MinerModel.MY_INDEX; minerCount <= MinerModel.BORPT_INDEX; minerCount++)
						{
							if (!(Model?.Miners.ToList()[minerCount].IsHidden ?? true))
							{
								var id = string.Format("weightId{0}", minerCount);
								var name = string.Format("Weight{0}", minerCount);

								// TODO: May want to use a utility to speed up the reflection.

								var value = string.Format("{0:N0}", Model.GetType().GetProperty("Weight" + minerCount)?.GetValue(Model));

								<td>
									@*The majority of this input was taken from Html.TextBoxFor*@

									<input name="@name"
										   class="form-control"
										   id="@id"
										   style="background-color: #dfffdf; width: 50px;"
										   type="text"
										   value="@value"
										   data-val-required="The Weight @minerCount field is required."
										   data-val-number="The field Weight @minerCount must be a number."
										   data-val="true">
								</td>
							}
						}

					</tr>
				</tbody>
			</table>

			<div class="row-divider"> </div>

			<input class="btn btn-success btn-lg"
				   onclick="clickPicks()"
				   type="button"
				   value="Picks..."
				   data-toggle="tooltip"
				   data-placement="bottom"
				   title="Click to choose picks based on weights and 'your' numbers...">
		}
	</div>
</div>